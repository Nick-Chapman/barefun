(*Stage3 (ANF)*)
let k () = ()
let block = fix (fun [] block f k ->
  let lam = fun [f] a k -> f a k in
  k lam) in
let length = fix (fun [] length xs k ->
  match xs with
  | Nil0 -> k 0
  | Cons1(_,xs) ->
    let k [] y =
      let prim = PRIM_AddInt(1,y) in
      k prim in
    length xs k) in
let rev_onto = fix (fun [] rev_onto acc k ->
  let lam = fun [acc,rev_onto] xs k ->
    match xs with
    | Nil0 -> k acc
    | Cons1(x,xs) ->
      let con = Cons1[x,acc] in
      let k [xs] app = app xs k in
      rev_onto con k in
  k lam) in
let lam = fun [length] xs k ->
  let k [xs] x =
    let b = PRIM_MakeBytes(x) in
    let loop = fix (fun [b] loop i k ->
      let lam = fun [b,i,loop] xs k ->
        match xs with
        | Nil0 ->
          let con = Unit0 in
          k con
        | Cons1(x,xs) ->
          let _ = PRIM_SetBytes(b,i,x) in
          let prim = PRIM_AddInt(i,1) in
          let k [xs] app = app xs k in
          loop prim k in
      k lam) in
    let k [xs,b] app =
      let k [b] _ =
        let prim = PRIM_FreezeBytes(b) in
        k prim in
      app xs k in
    loop 0 k in
  length xs k in
let k [block,rev_onto] implode =
  let lam = fun [] s k ->
    let explode_loop = fix (fun [s] explode_loop acc k ->
      let lam = fun [s,acc,explode_loop] i k ->
        let prim = PRIM_LessInt(i,0) in
        match prim with
        | true1 -> k acc
        | false0 ->
          let x = PRIM_StringIndex(s,i) in
          let con = Cons1[x,acc] in
          let k [i] app =
            let prim = PRIM_SubInt(i,1) in
            app prim k in
          explode_loop con k in
      k lam) in
    let x = PRIM_StringLength(s) in
    let con = Nil0 in
    let k [x] app =
      let prim = PRIM_SubInt(x,1) in
      app prim k in
    explode_loop con k in
  let k [rev_onto,implode] explode =
    let put_chars = fix (fun [] put_chars xs k ->
      match xs with
      | Nil0 ->
        let con = Unit0 in
        k con
      | Cons1(x,xs) ->
        let n = PRIM_CharOrd(x) in
        let prim = PRIM_EqInt(n,8) in
        let k [put_chars,xs] _ = put_chars xs k in
        match prim with
        | true1 ->
          let prim = PRIM_PutChar(x) in
          k prim
        | false0 ->
          let prim = PRIM_EqChar(x,'\n') in
          match prim with
          | true1 ->
            let prim = PRIM_PutChar(x) in
            k prim
          | false0 ->
            let prim = PRIM_LessInt(26,n) in
            match prim with
            | true1 ->
              let prim = PRIM_PutChar(x) in
              k prim
            | false0 ->
              let _ = PRIM_PutChar('^') in
              let x = PRIM_AddInt(65,n) in
              let x = PRIM_SubInt(x,1) in
              let x = PRIM_CharChr(x) in
              let prim = PRIM_PutChar(x) in
              k prim) in
    let prim = PRIM_MakeBytes(16384) in
    let disk = Disk0[prim] in
    let loop = fix (fun [] loop acc k ->
      let lam = fun [acc,loop] i k ->
        let prim = PRIM_EqInt(i,0) in
        match prim with
        | true1 -> k acc
        | false0 ->
          let c = PRIM_ModInt(i,10) in
          let x = PRIM_AddInt(48,c) in
          let x = PRIM_CharChr(x) in
          let con = Cons1[x,acc] in
          let k [i] app =
            let prim = PRIM_DivInt(i,10) in
            app prim k in
          loop con k in
      k lam) in
    let con = Nil0 in
    let con = Cons1['0',con] in
    let k [rev_onto,implode,explode,put_chars,disk] s1 =
      let k [rev_onto,implode,explode,put_chars,disk] xs =
        let lit = "   **SLOW**" in
        let k [rev_onto,implode,explode,put_chars,disk,xs] ys =
          let k [rev_onto,implode,explode,put_chars,disk,xs] app =
            let con = Nil0 in
            let k [rev_onto,implode,explode,app,put_chars,disk,xs] app =
              let k [rev_onto,implode,explode,app,put_chars,disk] app =
                let k [rev_onto,implode,explode,put_chars,disk] app =
                  let k [rev_onto,implode,explode,put_chars,disk] s2 =
                    let lit = "read_sector " in
                    let k [rev_onto,implode,explode,put_chars,disk,s2] xs =
                      let k [rev_onto,implode,explode,put_chars,disk,xs] ys =
                        let k [rev_onto,implode,explode,put_chars,disk,xs] app =
                          let con = Nil0 in
                          let k [rev_onto,implode,explode,app,put_chars,disk,xs] app =
                            let k [rev_onto,implode,explode,app,put_chars,disk] app =
                              let k [rev_onto,implode,explode,put_chars,disk] app =
                                let k [rev_onto,implode,explode,put_chars,disk] m =
                                  let k [rev_onto,implode,explode,put_chars,disk] xs =
                                    let lit = "\n" in
                                    let k [rev_onto,implode,explode,put_chars,disk,xs] ys =
                                      let k [rev_onto,implode,explode,put_chars,disk,xs] app =
                                        let con = Nil0 in
                                        let k [rev_onto,implode,explode,put_chars,disk,app,xs] app =
                                          let k [rev_onto,implode,explode,put_chars,disk,app] app =
                                            let k [rev_onto,implode,explode,put_chars,disk] app =
                                              let k [rev_onto,implode,explode,put_chars,disk] s2 =
                                                let lit = "trace: " in
                                                let k [rev_onto,implode,explode,put_chars,disk,s2] xs =
                                                  let k [rev_onto,implode,explode,put_chars,disk,xs] ys =
                                                    let k [rev_onto,implode,explode,put_chars,disk,xs] app =
                                                      let con = Nil0 in
                                                      let k [rev_onto,implode,explode,put_chars,disk,app,xs] app =
                                                        let k [rev_onto,implode,explode,put_chars,disk,app] app =
                                                          let k [rev_onto,implode,explode,put_chars,disk] app =
                                                            let k [rev_onto,implode,explode,put_chars,disk] s =
                                                              let k [rev_onto,implode,explode,put_chars,disk] app =
                                                                let k [rev_onto,implode,explode,put_chars,disk] _ =
                                                                  let k [rev_onto,implode,explode,put_chars,disk] source =
                                                                    let target = PRIM_MakeBytes(512) in
                                                                    let loop = fix (fun [source,target] loop i k ->
                                                                      let b = PRIM_LessInt(i,512) in
                                                                      let k [source,target,i,loop] case =
                                                                        match case with
                                                                        | true1 ->
                                                                          let con = Unit0 in
                                                                          k con
                                                                        | false0 ->
                                                                          let y = PRIM_AddInt(0,i) in
                                                                          let char = PRIM_GetBytes(source,y) in
                                                                          let _ = PRIM_SetBytes(target,i,char) in
                                                                          let prim = PRIM_AddInt(i,1) in
                                                                          loop prim k in
                                                                      match b with
                                                                      | true1 ->
                                                                        let con = false0 in
                                                                        k con
                                                                      | false0 ->
                                                                        let con = true1 in
                                                                        k con) in
                                                                    let k [rev_onto,implode,explode,put_chars,disk,target] _ =
                                                                      let con = false0 in
                                                                      let prim = PRIM_MakeRef(con) in
                                                                      let con = Sector0[target] in
                                                                      let cache_line = Cache_Line0[prim,0,con] in
                                                                      let prim = PRIM_MakeRef(cache_line) in
                                                                      let disk = DiskC10[disk,prim] in
                                                                      let loop = fix (fun [rev_onto,implode,explode,put_chars,disk] loop i k ->
                                                                        let prim = PRIM_LessInt(124,i) in
                                                                        match prim with
                                                                        | true1 ->
                                                                          let con = Unit0 in
                                                                          k con
                                                                        | false0 ->
                                                                          let y = PRIM_ModInt(i,10) in
                                                                          let x = PRIM_AddInt(48,y) in
                                                                          let char = PRIM_CharChr(x) in
                                                                          let loop = fix (fun [char] loop acc k ->
                                                                            let lam = fun [char,acc,loop] i k ->
                                                                              let prim = PRIM_EqInt(i,0) in
                                                                              match prim with
                                                                              | true1 -> k acc
                                                                              | false0 ->
                                                                                let con = Cons1[char,acc] in
                                                                                let k [i] app =
                                                                                  let prim = PRIM_SubInt(i,1) in
                                                                                  app prim k in
                                                                                loop con k in
                                                                            k lam) in
                                                                          let con = Nil0 in
                                                                          let k [rev_onto,implode,explode,put_chars,disk,i,loop] app =
                                                                            let k [rev_onto,implode,explode,put_chars,disk,i,loop] app =
                                                                              let k [rev_onto,implode,explode,put_chars,disk,i,loop] x =
                                                                                let prim = PRIM_ThawBytes(x) in
                                                                                let block = Block0[prim] in
                                                                                let prim = PRIM_LessInt(i,0) in
                                                                                let k [rev_onto,implode,explode,put_chars,disk,i,loop,block] case =
                                                                                  let k [i,loop] _ =
                                                                                    let prim = PRIM_AddInt(i,1) in
                                                                                    loop prim k in
                                                                                  match case with
                                                                                  | true1 ->
                                                                                    let loop = fix (fun [] loop acc k ->
                                                                                      let lam = fun [acc,loop] i k ->
                                                                                        let prim = PRIM_EqInt(i,0) in
                                                                                        match prim with
                                                                                        | true1 -> k acc
                                                                                        | false0 ->
                                                                                          let c = PRIM_ModInt(i,10) in
                                                                                          let x = PRIM_AddInt(48,c) in
                                                                                          let x = PRIM_CharChr(x) in
                                                                                          let con = Cons1[x,acc] in
                                                                                          let k [i] app =
                                                                                            let prim = PRIM_DivInt(i,10) in
                                                                                            app prim k in
                                                                                          loop con k in
                                                                                      k lam) in
                                                                                    let prim = PRIM_EqInt(i,0) in
                                                                                    let k [rev_onto,implode,explode,put_chars] case =
                                                                                      let k [rev_onto,implode,explode,put_chars] s2 =
                                                                                        let lit = "write_block " in
                                                                                        let k [rev_onto,implode,explode,put_chars,s2] xs =
                                                                                          let k [rev_onto,implode,explode,put_chars,xs] ys =
                                                                                            let k [rev_onto,implode,explode,put_chars,xs] app =
                                                                                              let con = Nil0 in
                                                                                              let k [rev_onto,implode,explode,put_chars,app,xs] app =
                                                                                                let k [rev_onto,implode,explode,put_chars,app] app =
                                                                                                  let k [rev_onto,implode,explode,put_chars] app =
                                                                                                    let k [rev_onto,implode,explode,put_chars] m =
                                                                                                      let k [rev_onto,implode,explode,put_chars] xs =
                                                                                                        let lit = "\n" in
                                                                                                        let k [rev_onto,implode,explode,put_chars,xs] ys =
                                                                                                          let k [rev_onto,implode,explode,put_chars,xs] app =
                                                                                                            let con = Nil0 in
                                                                                                            let k [rev_onto,implode,explode,put_chars,xs,app] app =
                                                                                                              let k [rev_onto,implode,explode,put_chars,app] app =
                                                                                                                let k [rev_onto,implode,explode,put_chars] app =
                                                                                                                  let k [rev_onto,implode,explode,put_chars] s2 =
                                                                                                                    let lit = "error: " in
                                                                                                                    let k [rev_onto,implode,explode,put_chars,s2] xs =
                                                                                                                      let k [rev_onto,implode,explode,put_chars,xs] ys =
                                                                                                                        let k [rev_onto,implode,explode,put_chars,xs] app =
                                                                                                                          let con = Nil0 in
                                                                                                                          let k [implode,explode,put_chars,xs,app] app =
                                                                                                                            let k [implode,explode,put_chars,app] app =
                                                                                                                              let k [implode,explode,put_chars] app =
                                                                                                                                let k [explode,put_chars] s =
                                                                                                                                  let k [put_chars] app =
                                                                                                                                    let k [] _ =
                                                                                                                                      let con = Unit0 in
                                                                                                                                      let prim = PRIM_Crash(con) in
                                                                                                                                      k prim in
                                                                                                                                    put_chars app k in
                                                                                                                                  explode s k in
                                                                                                                                implode app k in
                                                                                                                              app app k in
                                                                                                                            app xs k in
                                                                                                                          rev_onto con k in
                                                                                                                        rev_onto ys k in
                                                                                                                      explode s2 k in
                                                                                                                    explode lit k in
                                                                                                                  implode app k in
                                                                                                                app app k in
                                                                                                              app xs k in
                                                                                                            rev_onto con k in
                                                                                                          rev_onto ys k in
                                                                                                        explode lit k in
                                                                                                      explode m k in
                                                                                                    implode app k in
                                                                                                  app app k in
                                                                                                app xs k in
                                                                                              rev_onto con k in
                                                                                            rev_onto ys k in
                                                                                          explode s2 k in
                                                                                        explode lit k in
                                                                                      implode case k in
                                                                                    match prim with
                                                                                    | true1 ->
                                                                                      let con = Nil0 in
                                                                                      let con = Cons1['0',con] in
                                                                                      k con
                                                                                    | false0 ->
                                                                                      let con = Nil0 in
                                                                                      let k [i] app = app i k in
                                                                                      loop con k
                                                                                  | false0 ->
                                                                                    let seci = PRIM_DivInt(i,8) in
                                                                                    let loop = fix (fun [] loop acc k ->
                                                                                      let lam = fun [acc,loop] i k ->
                                                                                        let prim = PRIM_EqInt(i,0) in
                                                                                        match prim with
                                                                                        | true1 -> k acc
                                                                                        | false0 ->
                                                                                          let c = PRIM_ModInt(i,10) in
                                                                                          let x = PRIM_AddInt(48,c) in
                                                                                          let x = PRIM_CharChr(x) in
                                                                                          let con = Cons1[x,acc] in
                                                                                          let k [i] app =
                                                                                            let prim = PRIM_DivInt(i,10) in
                                                                                            app prim k in
                                                                                          loop con k in
                                                                                      k lam) in
                                                                                    let prim = PRIM_EqInt(i,0) in
                                                                                    let k [rev_onto,implode,explode,put_chars,disk,i,block,seci] case =
                                                                                      let k [rev_onto,implode,explode,put_chars,disk,i,block,seci] s1 =
                                                                                        let loop = fix (fun [] loop acc k ->
                                                                                          let lam = fun [acc,loop] i k ->
                                                                                            let prim = PRIM_EqInt(i,0) in
                                                                                            match prim with
                                                                                            | true1 -> k acc
                                                                                            | false0 ->
                                                                                              let c = PRIM_ModInt(i,10) in
                                                                                              let x = PRIM_AddInt(48,c) in
                                                                                              let x = PRIM_CharChr(x) in
                                                                                              let con = Cons1[x,acc] in
                                                                                              let k [i] app =
                                                                                                let prim = PRIM_DivInt(i,10) in
                                                                                                app prim k in
                                                                                              loop con k in
                                                                                          k lam) in
                                                                                        let prim = PRIM_EqInt(seci,0) in
                                                                                        let k [rev_onto,implode,explode,put_chars,disk,i,block,seci,s1] case =
                                                                                          let k [rev_onto,implode,explode,put_chars,disk,i,block,seci,s1] s1 =
                                                                                            let k [rev_onto,implode,explode,put_chars,disk,i,block,seci,s1] xs =
                                                                                              let lit = "]" in
                                                                                              let k [rev_onto,implode,explode,put_chars,disk,i,block,seci,s1,xs] ys =
                                                                                                let k [rev_onto,implode,explode,put_chars,disk,i,block,seci,s1,xs] app =
                                                                                                  let con = Nil0 in
                                                                                                  let k [rev_onto,implode,explode,put_chars,disk,i,block,seci,s1,xs,app] app =
                                                                                                    let k [rev_onto,implode,explode,put_chars,disk,i,block,seci,s1,app] app =
                                                                                                      let k [rev_onto,implode,explode,put_chars,disk,i,block,seci,s1] app =
                                                                                                        let k [rev_onto,implode,explode,put_chars,disk,i,block,seci,s1] s2 =
                                                                                                          let lit = "[" in
                                                                                                          let k [rev_onto,implode,explode,put_chars,disk,i,block,seci,s1,s2] xs =
                                                                                                            let k [rev_onto,implode,explode,put_chars,disk,i,block,seci,s1,xs] ys =
                                                                                                              let k [rev_onto,implode,explode,put_chars,disk,i,block,seci,s1,xs] app =
                                                                                                                let con = Nil0 in
                                                                                                                let k [rev_onto,implode,explode,put_chars,disk,i,block,seci,s1,xs,app] app =
                                                                                                                  let k [rev_onto,implode,explode,put_chars,disk,i,block,seci,s1,app] app =
                                                                                                                    let k [rev_onto,implode,explode,put_chars,disk,i,block,seci,s1] app =
                                                                                                                      let k [rev_onto,implode,explode,put_chars,disk,i,block,seci,s1] s2 =
                                                                                                                        let k [rev_onto,implode,explode,put_chars,disk,i,block,seci,s2] xs =
                                                                                                                          let k [rev_onto,implode,explode,put_chars,disk,i,block,seci,xs] ys =
                                                                                                                            let k [rev_onto,implode,explode,put_chars,disk,i,block,seci,xs] app =
                                                                                                                              let con = Nil0 in
                                                                                                                              let k [rev_onto,implode,explode,put_chars,disk,i,block,seci,xs,app] app =
                                                                                                                                let k [rev_onto,implode,explode,put_chars,disk,i,block,seci,app] app =
                                                                                                                                  let k [rev_onto,implode,explode,put_chars,disk,i,block,seci] app =
                                                                                                                                    let k [rev_onto,implode,explode,put_chars,disk,i,block,seci] s2 =
                                                                                                                                      let lit = "write_block " in
                                                                                                                                      let k [rev_onto,implode,explode,put_chars,disk,i,block,seci,s2] xs =
                                                                                                                                        let k [rev_onto,implode,explode,put_chars,disk,i,block,seci,xs] ys =
                                                                                                                                          let k [rev_onto,implode,explode,put_chars,disk,i,block,seci,xs] app =
                                                                                                                                            let con = Nil0 in
                                                                                                                                            let k [rev_onto,implode,explode,put_chars,disk,i,block,seci,xs,app] app =
                                                                                                                                              let k [rev_onto,implode,explode,put_chars,disk,i,block,seci,app] app =
                                                                                                                                                let k [rev_onto,implode,explode,put_chars,disk,i,block,seci] app =
                                                                                                                                                  let k [rev_onto,implode,explode,put_chars,disk,i,block,seci] m =
                                                                                                                                                    let y = PRIM_ModInt(i,8) in
                                                                                                                                                    let offset = PRIM_MulInt(64,y) in
                                                                                                                                                    let k [rev_onto,implode,explode,put_chars,disk,seci,offset] new_bytes =
                                                                                                                                                      let loop = fix (fun [] loop acc k ->
                                                                                                                                                        let lam = fun [acc,loop] i k ->
                                                                                                                                                          let prim = PRIM_EqInt(i,0) in
                                                                                                                                                          match prim with
                                                                                                                                                          | true1 -> k acc
                                                                                                                                                          | false0 ->
                                                                                                                                                            let c = PRIM_ModInt(i,10) in
                                                                                                                                                            let x = PRIM_AddInt(48,c) in
                                                                                                                                                            let x = PRIM_CharChr(x) in
                                                                                                                                                            let con = Cons1[x,acc] in
                                                                                                                                                            let k [i] app =
                                                                                                                                                              let prim = PRIM_DivInt(i,10) in
                                                                                                                                                              app prim k in
                                                                                                                                                            loop con k in
                                                                                                                                                        k lam) in
                                                                                                                                                      let prim = PRIM_EqInt(seci,0) in
                                                                                                                                                      let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes] case =
                                                                                                                                                        let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes] s1 =
                                                                                                                                                          let loop = fix (fun [] loop acc k ->
                                                                                                                                                            let lam = fun [acc,loop] i k ->
                                                                                                                                                              let prim = PRIM_EqInt(i,0) in
                                                                                                                                                              match prim with
                                                                                                                                                              | true1 -> k acc
                                                                                                                                                              | false0 ->
                                                                                                                                                                let c = PRIM_ModInt(i,10) in
                                                                                                                                                                let x = PRIM_AddInt(48,c) in
                                                                                                                                                                let x = PRIM_CharChr(x) in
                                                                                                                                                                let con = Cons1[x,acc] in
                                                                                                                                                                let k [i] app =
                                                                                                                                                                  let prim = PRIM_DivInt(i,10) in
                                                                                                                                                                  app prim k in
                                                                                                                                                                loop con k in
                                                                                                                                                            k lam) in
                                                                                                                                                          let prim = PRIM_EqInt(offset,0) in
                                                                                                                                                          let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes,s1] case =
                                                                                                                                                            let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes,s1] s1 =
                                                                                                                                                              let loop = fix (fun [] loop acc k ->
                                                                                                                                                                let lam = fun [acc,loop] i k ->
                                                                                                                                                                  let prim = PRIM_EqInt(i,0) in
                                                                                                                                                                  match prim with
                                                                                                                                                                  | true1 -> k acc
                                                                                                                                                                  | false0 ->
                                                                                                                                                                    let c = PRIM_ModInt(i,10) in
                                                                                                                                                                    let x = PRIM_AddInt(48,c) in
                                                                                                                                                                    let x = PRIM_CharChr(x) in
                                                                                                                                                                    let con = Cons1[x,acc] in
                                                                                                                                                                    let k [i] app =
                                                                                                                                                                      let prim = PRIM_DivInt(i,10) in
                                                                                                                                                                      app prim k in
                                                                                                                                                                    loop con k in
                                                                                                                                                                k lam) in
                                                                                                                                                              let con = Nil0 in
                                                                                                                                                              let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes,s1,s1] app =
                                                                                                                                                                let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes,s1,s1] app =
                                                                                                                                                                  let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes,s1,s1] s2 =
                                                                                                                                                                    let lit = ", len=" in
                                                                                                                                                                    let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes,s1,s1,s2] xs =
                                                                                                                                                                      let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes,s1,s1,xs] ys =
                                                                                                                                                                        let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes,s1,s1,xs] app =
                                                                                                                                                                          let con = Nil0 in
                                                                                                                                                                          let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes,s1,s1,xs,app] app =
                                                                                                                                                                            let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes,s1,s1,app] app =
                                                                                                                                                                              let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes,s1,s1] app =
                                                                                                                                                                                let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes,s1,s1] s2 =
                                                                                                                                                                                  let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes,s1,s2] xs =
                                                                                                                                                                                    let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes,s1,xs] ys =
                                                                                                                                                                                      let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes,s1,xs] app =
                                                                                                                                                                                        let con = Nil0 in
                                                                                                                                                                                        let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes,s1,xs,app] app =
                                                                                                                                                                                          let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes,s1,app] app =
                                                                                                                                                                                            let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes,s1] app =
                                                                                                                                                                                              let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes,s1] s2 =
                                                                                                                                                                                                let lit = ", offset=" in
                                                                                                                                                                                                let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes,s1,s2] xs =
                                                                                                                                                                                                  let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes,s1,xs] ys =
                                                                                                                                                                                                    let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes,s1,xs] app =
                                                                                                                                                                                                      let con = Nil0 in
                                                                                                                                                                                                      let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes,s1,xs,app] app =
                                                                                                                                                                                                        let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes,s1,app] app =
                                                                                                                                                                                                          let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes,s1] app =
                                                                                                                                                                                                            let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes,s1] s2 =
                                                                                                                                                                                                              let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes,s2] xs =
                                                                                                                                                                                                                let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes,xs] ys =
                                                                                                                                                                                                                  let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes,xs] app =
                                                                                                                                                                                                                    let con = Nil0 in
                                                                                                                                                                                                                    let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes,xs,app] app =
                                                                                                                                                                                                                      let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes,app] app =
                                                                                                                                                                                                                        let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes] app =
                                                                                                                                                                                                                          let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes] s2 =
                                                                                                                                                                                                                            let lit = "update_sectorC1 seci=" in
                                                                                                                                                                                                                            let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes,s2] xs =
                                                                                                                                                                                                                              let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes,xs] ys =
                                                                                                                                                                                                                                let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes,xs] app =
                                                                                                                                                                                                                                  let con = Nil0 in
                                                                                                                                                                                                                                  let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes,xs,app] app =
                                                                                                                                                                                                                                    let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes,app] app =
                                                                                                                                                                                                                                      let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes] app =
                                                                                                                                                                                                                                        let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes] m =
                                                                                                                                                                                                                                          match disk with
                                                                                                                                                                                                                                          | DiskC10(disk,r) ->
                                                                                                                                                                                                                                            let cache_line = PRIM_DeRef(r) in
                                                                                                                                                                                                                                            match cache_line with
                                                                                                                                                                                                                                            | Cache_Line0(dirty,secj,sector) ->
                                                                                                                                                                                                                                              let prim = PRIM_EqInt(seci,secj) in
                                                                                                                                                                                                                                              match prim with
                                                                                                                                                                                                                                              | true1 ->
                                                                                                                                                                                                                                                let k [offset,new_bytes,dirty] target =
                                                                                                                                                                                                                                                  let loop = fix (fun [offset,new_bytes,target] loop i k ->
                                                                                                                                                                                                                                                    let b = PRIM_LessInt(i,64) in
                                                                                                                                                                                                                                                    let k [offset,new_bytes,target,i,loop] case =
                                                                                                                                                                                                                                                      match case with
                                                                                                                                                                                                                                                      | true1 ->
                                                                                                                                                                                                                                                        let con = Unit0 in
                                                                                                                                                                                                                                                        k con
                                                                                                                                                                                                                                                      | false0 ->
                                                                                                                                                                                                                                                        let char = PRIM_GetBytes(new_bytes,i) in
                                                                                                                                                                                                                                                        let y = PRIM_AddInt(offset,i) in
                                                                                                                                                                                                                                                        let _ = PRIM_SetBytes(target,y,char) in
                                                                                                                                                                                                                                                        let prim = PRIM_AddInt(i,1) in
                                                                                                                                                                                                                                                        loop prim k in
                                                                                                                                                                                                                                                    match b with
                                                                                                                                                                                                                                                    | true1 ->
                                                                                                                                                                                                                                                      let con = false0 in
                                                                                                                                                                                                                                                      k con
                                                                                                                                                                                                                                                    | false0 ->
                                                                                                                                                                                                                                                      let con = true1 in
                                                                                                                                                                                                                                                      k con) in
                                                                                                                                                                                                                                                  let k [dirty] _ =
                                                                                                                                                                                                                                                    let con = true1 in
                                                                                                                                                                                                                                                    let prim = PRIM_SetRef(dirty,con) in
                                                                                                                                                                                                                                                    k prim in
                                                                                                                                                                                                                                                  loop 0 k in
                                                                                                                                                                                                                                                match sector with
                                                                                                                                                                                                                                                | Sector0(x) -> k x
                                                                                                                                                                                                                                              | false0 ->
                                                                                                                                                                                                                                                let prim = PRIM_DeRef(dirty) in
                                                                                                                                                                                                                                                let k [rev_onto,implode,explode,put_chars,seci,offset,new_bytes,disk,r] _ =
                                                                                                                                                                                                                                                  let prim = PRIM_LessInt(seci,0) in
                                                                                                                                                                                                                                                  let k [rev_onto,implode,explode,put_chars,seci,offset,new_bytes,disk,r] case =
                                                                                                                                                                                                                                                    let k [seci,offset,new_bytes,r] sector =
                                                                                                                                                                                                                                                      let k [seci,offset,new_bytes,r,sector] target =
                                                                                                                                                                                                                                                        let loop = fix (fun [offset,new_bytes,target] loop i k ->
                                                                                                                                                                                                                                                          let b = PRIM_LessInt(i,64) in
                                                                                                                                                                                                                                                          let k [offset,new_bytes,target,i,loop] case =
                                                                                                                                                                                                                                                            match case with
                                                                                                                                                                                                                                                            | true1 ->
                                                                                                                                                                                                                                                              let con = Unit0 in
                                                                                                                                                                                                                                                              k con
                                                                                                                                                                                                                                                            | false0 ->
                                                                                                                                                                                                                                                              let char = PRIM_GetBytes(new_bytes,i) in
                                                                                                                                                                                                                                                              let y = PRIM_AddInt(offset,i) in
                                                                                                                                                                                                                                                              let _ = PRIM_SetBytes(target,y,char) in
                                                                                                                                                                                                                                                              let prim = PRIM_AddInt(i,1) in
                                                                                                                                                                                                                                                              loop prim k in
                                                                                                                                                                                                                                                          match b with
                                                                                                                                                                                                                                                          | true1 ->
                                                                                                                                                                                                                                                            let con = false0 in
                                                                                                                                                                                                                                                            k con
                                                                                                                                                                                                                                                          | false0 ->
                                                                                                                                                                                                                                                            let con = true1 in
                                                                                                                                                                                                                                                            k con) in
                                                                                                                                                                                                                                                        let k [seci,r,sector] _ =
                                                                                                                                                                                                                                                          let con = true1 in
                                                                                                                                                                                                                                                          let prim = PRIM_MakeRef(con) in
                                                                                                                                                                                                                                                          let cache_line = Cache_Line0[prim,seci,sector] in
                                                                                                                                                                                                                                                          let prim = PRIM_SetRef(r,cache_line) in
                                                                                                                                                                                                                                                          k prim in
                                                                                                                                                                                                                                                        loop 0 k in
                                                                                                                                                                                                                                                      match sector with
                                                                                                                                                                                                                                                      | Sector0(x) -> k x in
                                                                                                                                                                                                                                                    match case with
                                                                                                                                                                                                                                                    | true1 ->
                                                                                                                                                                                                                                                      let loop = fix (fun [] loop acc k ->
                                                                                                                                                                                                                                                        let lam = fun [acc,loop] i k ->
                                                                                                                                                                                                                                                          let prim = PRIM_EqInt(i,0) in
                                                                                                                                                                                                                                                          match prim with
                                                                                                                                                                                                                                                          | true1 -> k acc
                                                                                                                                                                                                                                                          | false0 ->
                                                                                                                                                                                                                                                            let c = PRIM_ModInt(i,10) in
                                                                                                                                                                                                                                                            let x = PRIM_AddInt(48,c) in
                                                                                                                                                                                                                                                            let x = PRIM_CharChr(x) in
                                                                                                                                                                                                                                                            let con = Cons1[x,acc] in
                                                                                                                                                                                                                                                            let k [i] app =
                                                                                                                                                                                                                                                              let prim = PRIM_DivInt(i,10) in
                                                                                                                                                                                                                                                              app prim k in
                                                                                                                                                                                                                                                            loop con k in
                                                                                                                                                                                                                                                        k lam) in
                                                                                                                                                                                                                                                      let prim = PRIM_EqInt(seci,0) in
                                                                                                                                                                                                                                                      let k [rev_onto,implode,explode,put_chars] case =
                                                                                                                                                                                                                                                        let k [rev_onto,implode,explode,put_chars] s2 =
                                                                                                                                                                                                                                                          let lit = "read_sector " in
                                                                                                                                                                                                                                                          let k [rev_onto,implode,explode,put_chars,s2] xs =
                                                                                                                                                                                                                                                            let k [rev_onto,implode,explode,put_chars,xs] ys =
                                                                                                                                                                                                                                                              let k [rev_onto,implode,explode,put_chars,xs] app =
                                                                                                                                                                                                                                                                let con = Nil0 in
                                                                                                                                                                                                                                                                let k [rev_onto,implode,explode,put_chars,xs,app] app =
                                                                                                                                                                                                                                                                  let k [rev_onto,implode,explode,put_chars,app] app =
                                                                                                                                                                                                                                                                    let k [rev_onto,implode,explode,put_chars] app =
                                                                                                                                                                                                                                                                      let k [rev_onto,implode,explode,put_chars] m =
                                                                                                                                                                                                                                                                        let k [rev_onto,implode,explode,put_chars] xs =
                                                                                                                                                                                                                                                                          let lit = "\n" in
                                                                                                                                                                                                                                                                          let k [rev_onto,implode,explode,put_chars,xs] ys =
                                                                                                                                                                                                                                                                            let k [rev_onto,implode,explode,put_chars,xs] app =
                                                                                                                                                                                                                                                                              let con = Nil0 in
                                                                                                                                                                                                                                                                              let k [rev_onto,implode,explode,put_chars,xs,app] app =
                                                                                                                                                                                                                                                                                let k [rev_onto,implode,explode,put_chars,app] app =
                                                                                                                                                                                                                                                                                  let k [rev_onto,implode,explode,put_chars] app =
                                                                                                                                                                                                                                                                                    let k [rev_onto,implode,explode,put_chars] s2 =
                                                                                                                                                                                                                                                                                      let lit = "error: " in
                                                                                                                                                                                                                                                                                      let k [rev_onto,implode,explode,put_chars,s2] xs =
                                                                                                                                                                                                                                                                                        let k [rev_onto,implode,explode,put_chars,xs] ys =
                                                                                                                                                                                                                                                                                          let k [rev_onto,implode,explode,put_chars,xs] app =
                                                                                                                                                                                                                                                                                            let con = Nil0 in
                                                                                                                                                                                                                                                                                            let k [implode,explode,put_chars,xs,app] app =
                                                                                                                                                                                                                                                                                              let k [implode,explode,put_chars,app] app =
                                                                                                                                                                                                                                                                                                let k [implode,explode,put_chars] app =
                                                                                                                                                                                                                                                                                                  let k [explode,put_chars] s =
                                                                                                                                                                                                                                                                                                    let k [put_chars] app =
                                                                                                                                                                                                                                                                                                      let k [] _ =
                                                                                                                                                                                                                                                                                                        let con = Unit0 in
                                                                                                                                                                                                                                                                                                        let prim = PRIM_Crash(con) in
                                                                                                                                                                                                                                                                                                        k prim in
                                                                                                                                                                                                                                                                                                      put_chars app k in
                                                                                                                                                                                                                                                                                                    explode s k in
                                                                                                                                                                                                                                                                                                  implode app k in
                                                                                                                                                                                                                                                                                                app app k in
                                                                                                                                                                                                                                                                                              app xs k in
                                                                                                                                                                                                                                                                                            rev_onto con k in
                                                                                                                                                                                                                                                                                          rev_onto ys k in
                                                                                                                                                                                                                                                                                        explode s2 k in
                                                                                                                                                                                                                                                                                      explode lit k in
                                                                                                                                                                                                                                                                                    implode app k in
                                                                                                                                                                                                                                                                                  app app k in
                                                                                                                                                                                                                                                                                app xs k in
                                                                                                                                                                                                                                                                              rev_onto con k in
                                                                                                                                                                                                                                                                            rev_onto ys k in
                                                                                                                                                                                                                                                                          explode lit k in
                                                                                                                                                                                                                                                                        explode m k in
                                                                                                                                                                                                                                                                      implode app k in
                                                                                                                                                                                                                                                                    app app k in
                                                                                                                                                                                                                                                                  app xs k in
                                                                                                                                                                                                                                                                rev_onto con k in
                                                                                                                                                                                                                                                              rev_onto ys k in
                                                                                                                                                                                                                                                            explode s2 k in
                                                                                                                                                                                                                                                          explode lit k in
                                                                                                                                                                                                                                                        implode case k in
                                                                                                                                                                                                                                                      match prim with
                                                                                                                                                                                                                                                      | true1 ->
                                                                                                                                                                                                                                                        let con = Nil0 in
                                                                                                                                                                                                                                                        let con = Cons1['0',con] in
                                                                                                                                                                                                                                                        k con
                                                                                                                                                                                                                                                      | false0 ->
                                                                                                                                                                                                                                                        let con = Nil0 in
                                                                                                                                                                                                                                                        let k [seci] app = app seci k in
                                                                                                                                                                                                                                                        loop con k
                                                                                                                                                                                                                                                    | false0 ->
                                                                                                                                                                                                                                                      let loop = fix (fun [] loop acc k ->
                                                                                                                                                                                                                                                        let lam = fun [acc,loop] i k ->
                                                                                                                                                                                                                                                          let prim = PRIM_EqInt(i,0) in
                                                                                                                                                                                                                                                          match prim with
                                                                                                                                                                                                                                                          | true1 -> k acc
                                                                                                                                                                                                                                                          | false0 ->
                                                                                                                                                                                                                                                            let c = PRIM_ModInt(i,10) in
                                                                                                                                                                                                                                                            let x = PRIM_AddInt(48,c) in
                                                                                                                                                                                                                                                            let x = PRIM_CharChr(x) in
                                                                                                                                                                                                                                                            let con = Cons1[x,acc] in
                                                                                                                                                                                                                                                            let k [i] app =
                                                                                                                                                                                                                                                              let prim = PRIM_DivInt(i,10) in
                                                                                                                                                                                                                                                              app prim k in
                                                                                                                                                                                                                                                            loop con k in
                                                                                                                                                                                                                                                        k lam) in
                                                                                                                                                                                                                                                      let prim = PRIM_EqInt(seci,0) in
                                                                                                                                                                                                                                                      let k [rev_onto,implode,explode,put_chars,seci,disk] case =
                                                                                                                                                                                                                                                        let k [rev_onto,implode,explode,put_chars,seci,disk] s1 =
                                                                                                                                                                                                                                                          let k [rev_onto,implode,explode,put_chars,seci,disk] xs =
                                                                                                                                                                                                                                                            let lit = "   **SLOW**" in
                                                                                                                                                                                                                                                            let k [rev_onto,implode,explode,put_chars,seci,disk,xs] ys =
                                                                                                                                                                                                                                                              let k [rev_onto,implode,explode,put_chars,seci,disk,xs] app =
                                                                                                                                                                                                                                                                let con = Nil0 in
                                                                                                                                                                                                                                                                let k [rev_onto,implode,explode,put_chars,seci,disk,xs,app] app =
                                                                                                                                                                                                                                                                  let k [rev_onto,implode,explode,put_chars,seci,disk,app] app =
                                                                                                                                                                                                                                                                    let k [rev_onto,implode,explode,put_chars,seci,disk] app =
                                                                                                                                                                                                                                                                      let k [rev_onto,implode,explode,put_chars,seci,disk] s2 =
                                                                                                                                                                                                                                                                        let lit = "read_sector " in
                                                                                                                                                                                                                                                                        let k [rev_onto,implode,explode,put_chars,seci,disk,s2] xs =
                                                                                                                                                                                                                                                                          let k [rev_onto,implode,explode,put_chars,seci,disk,xs] ys =
                                                                                                                                                                                                                                                                            let k [rev_onto,implode,explode,put_chars,seci,disk,xs] app =
                                                                                                                                                                                                                                                                              let con = Nil0 in
                                                                                                                                                                                                                                                                              let k [rev_onto,implode,explode,put_chars,seci,disk,xs,app] app =
                                                                                                                                                                                                                                                                                let k [rev_onto,implode,explode,put_chars,seci,disk,app] app =
                                                                                                                                                                                                                                                                                  let k [rev_onto,implode,explode,put_chars,seci,disk] app =
                                                                                                                                                                                                                                                                                    let k [rev_onto,implode,explode,put_chars,seci,disk] m =
                                                                                                                                                                                                                                                                                      let k [rev_onto,implode,explode,put_chars,seci,disk] xs =
                                                                                                                                                                                                                                                                                        let lit = "\n" in
                                                                                                                                                                                                                                                                                        let k [rev_onto,implode,explode,put_chars,seci,disk,xs] ys =
                                                                                                                                                                                                                                                                                          let k [rev_onto,implode,explode,put_chars,seci,disk,xs] app =
                                                                                                                                                                                                                                                                                            let con = Nil0 in
                                                                                                                                                                                                                                                                                            let k [rev_onto,implode,explode,put_chars,seci,disk,xs,app] app =
                                                                                                                                                                                                                                                                                              let k [rev_onto,implode,explode,put_chars,seci,disk,app] app =
                                                                                                                                                                                                                                                                                                let k [rev_onto,implode,explode,put_chars,seci,disk] app =
                                                                                                                                                                                                                                                                                                  let k [rev_onto,implode,explode,put_chars,seci,disk] s2 =
                                                                                                                                                                                                                                                                                                    let lit = "trace: " in
                                                                                                                                                                                                                                                                                                    let k [rev_onto,implode,explode,put_chars,seci,disk,s2] xs =
                                                                                                                                                                                                                                                                                                      let k [rev_onto,implode,explode,put_chars,seci,disk,xs] ys =
                                                                                                                                                                                                                                                                                                        let k [rev_onto,implode,explode,put_chars,seci,disk,xs] app =
                                                                                                                                                                                                                                                                                                          let con = Nil0 in
                                                                                                                                                                                                                                                                                                          let k [implode,explode,put_chars,seci,disk,xs,app] app =
                                                                                                                                                                                                                                                                                                            let k [implode,explode,put_chars,seci,disk,app] app =
                                                                                                                                                                                                                                                                                                              let k [implode,explode,put_chars,seci,disk] app =
                                                                                                                                                                                                                                                                                                                let k [explode,put_chars,seci,disk] s =
                                                                                                                                                                                                                                                                                                                  let k [put_chars,seci,disk] app =
                                                                                                                                                                                                                                                                                                                    let k [seci,disk] _ =
                                                                                                                                                                                                                                                                                                                      let k [seci] source =
                                                                                                                                                                                                                                                                                                                        let offset = PRIM_MulInt(seci,512) in
                                                                                                                                                                                                                                                                                                                        let target = PRIM_MakeBytes(512) in
                                                                                                                                                                                                                                                                                                                        let loop = fix (fun [source,offset,target] loop i k ->
                                                                                                                                                                                                                                                                                                                          let b = PRIM_LessInt(i,512) in
                                                                                                                                                                                                                                                                                                                          let k [source,offset,target,i,loop] case =
                                                                                                                                                                                                                                                                                                                            match case with
                                                                                                                                                                                                                                                                                                                            | true1 ->
                                                                                                                                                                                                                                                                                                                              let con = Unit0 in
                                                                                                                                                                                                                                                                                                                              k con
                                                                                                                                                                                                                                                                                                                            | false0 ->
                                                                                                                                                                                                                                                                                                                              let y = PRIM_AddInt(offset,i) in
                                                                                                                                                                                                                                                                                                                              let char = PRIM_GetBytes(source,y) in
                                                                                                                                                                                                                                                                                                                              let _ = PRIM_SetBytes(target,i,char) in
                                                                                                                                                                                                                                                                                                                              let prim = PRIM_AddInt(i,1) in
                                                                                                                                                                                                                                                                                                                              loop prim k in
                                                                                                                                                                                                                                                                                                                          match b with
                                                                                                                                                                                                                                                                                                                          | true1 ->
                                                                                                                                                                                                                                                                                                                            let con = false0 in
                                                                                                                                                                                                                                                                                                                            k con
                                                                                                                                                                                                                                                                                                                          | false0 ->
                                                                                                                                                                                                                                                                                                                            let con = true1 in
                                                                                                                                                                                                                                                                                                                            k con) in
                                                                                                                                                                                                                                                                                                                        let k [target] _ =
                                                                                                                                                                                                                                                                                                                          let con = Sector0[target] in
                                                                                                                                                                                                                                                                                                                          k con in
                                                                                                                                                                                                                                                                                                                        loop 0 k in
                                                                                                                                                                                                                                                                                                                      match disk with
                                                                                                                                                                                                                                                                                                                      | Disk0(x) -> k x in
                                                                                                                                                                                                                                                                                                                    put_chars app k in
                                                                                                                                                                                                                                                                                                                  explode s k in
                                                                                                                                                                                                                                                                                                                implode app k in
                                                                                                                                                                                                                                                                                                              app app k in
                                                                                                                                                                                                                                                                                                            app xs k in
                                                                                                                                                                                                                                                                                                          rev_onto con k in
                                                                                                                                                                                                                                                                                                        rev_onto ys k in
                                                                                                                                                                                                                                                                                                      explode s2 k in
                                                                                                                                                                                                                                                                                                    explode lit k in
                                                                                                                                                                                                                                                                                                  implode app k in
                                                                                                                                                                                                                                                                                                app app k in
                                                                                                                                                                                                                                                                                              app xs k in
                                                                                                                                                                                                                                                                                            rev_onto con k in
                                                                                                                                                                                                                                                                                          rev_onto ys k in
                                                                                                                                                                                                                                                                                        explode lit k in
                                                                                                                                                                                                                                                                                      explode m k in
                                                                                                                                                                                                                                                                                    implode app k in
                                                                                                                                                                                                                                                                                  app app k in
                                                                                                                                                                                                                                                                                app xs k in
                                                                                                                                                                                                                                                                              rev_onto con k in
                                                                                                                                                                                                                                                                            rev_onto ys k in
                                                                                                                                                                                                                                                                          explode s2 k in
                                                                                                                                                                                                                                                                        explode lit k in
                                                                                                                                                                                                                                                                      implode app k in
                                                                                                                                                                                                                                                                    app app k in
                                                                                                                                                                                                                                                                  app xs k in
                                                                                                                                                                                                                                                                rev_onto con k in
                                                                                                                                                                                                                                                              rev_onto ys k in
                                                                                                                                                                                                                                                            explode lit k in
                                                                                                                                                                                                                                                          explode s1 k in
                                                                                                                                                                                                                                                        implode case k in
                                                                                                                                                                                                                                                      match prim with
                                                                                                                                                                                                                                                      | true1 ->
                                                                                                                                                                                                                                                        let con = Nil0 in
                                                                                                                                                                                                                                                        let con = Cons1['0',con] in
                                                                                                                                                                                                                                                        k con
                                                                                                                                                                                                                                                      | false0 ->
                                                                                                                                                                                                                                                        let con = Nil0 in
                                                                                                                                                                                                                                                        let k [seci] app = app seci k in
                                                                                                                                                                                                                                                        loop con k in
                                                                                                                                                                                                                                                  match prim with
                                                                                                                                                                                                                                                  | true1 ->
                                                                                                                                                                                                                                                    let con = true1 in
                                                                                                                                                                                                                                                    k con
                                                                                                                                                                                                                                                  | false0 ->
                                                                                                                                                                                                                                                    let b = PRIM_LessInt(seci,32) in
                                                                                                                                                                                                                                                    match b with
                                                                                                                                                                                                                                                    | true1 ->
                                                                                                                                                                                                                                                      let con = false0 in
                                                                                                                                                                                                                                                      k con
                                                                                                                                                                                                                                                    | false0 ->
                                                                                                                                                                                                                                                      let con = true1 in
                                                                                                                                                                                                                                                      k con in
                                                                                                                                                                                                                                                match prim with
                                                                                                                                                                                                                                                | true1 ->
                                                                                                                                                                                                                                                  let prim = PRIM_LessInt(secj,0) in
                                                                                                                                                                                                                                                  let k [rev_onto,implode,explode,put_chars,disk,secj,sector] case =
                                                                                                                                                                                                                                                    match case with
                                                                                                                                                                                                                                                    | true1 ->
                                                                                                                                                                                                                                                      let loop = fix (fun [] loop acc k ->
                                                                                                                                                                                                                                                        let lam = fun [acc,loop] i k ->
                                                                                                                                                                                                                                                          let prim = PRIM_EqInt(i,0) in
                                                                                                                                                                                                                                                          match prim with
                                                                                                                                                                                                                                                          | true1 -> k acc
                                                                                                                                                                                                                                                          | false0 ->
                                                                                                                                                                                                                                                            let c = PRIM_ModInt(i,10) in
                                                                                                                                                                                                                                                            let x = PRIM_AddInt(48,c) in
                                                                                                                                                                                                                                                            let x = PRIM_CharChr(x) in
                                                                                                                                                                                                                                                            let con = Cons1[x,acc] in
                                                                                                                                                                                                                                                            let k [i] app =
                                                                                                                                                                                                                                                              let prim = PRIM_DivInt(i,10) in
                                                                                                                                                                                                                                                              app prim k in
                                                                                                                                                                                                                                                            loop con k in
                                                                                                                                                                                                                                                        k lam) in
                                                                                                                                                                                                                                                      let prim = PRIM_EqInt(secj,0) in
                                                                                                                                                                                                                                                      let k [rev_onto,implode,explode,put_chars] case =
                                                                                                                                                                                                                                                        let k [rev_onto,implode,explode,put_chars] s2 =
                                                                                                                                                                                                                                                          let lit = "write_sector " in
                                                                                                                                                                                                                                                          let k [rev_onto,implode,explode,put_chars,s2] xs =
                                                                                                                                                                                                                                                            let k [rev_onto,implode,explode,put_chars,xs] ys =
                                                                                                                                                                                                                                                              let k [rev_onto,implode,explode,put_chars,xs] app =
                                                                                                                                                                                                                                                                let con = Nil0 in
                                                                                                                                                                                                                                                                let k [rev_onto,implode,explode,put_chars,xs,app] app =
                                                                                                                                                                                                                                                                  let k [rev_onto,implode,explode,put_chars,app] app =
                                                                                                                                                                                                                                                                    let k [rev_onto,implode,explode,put_chars] app =
                                                                                                                                                                                                                                                                      let k [rev_onto,implode,explode,put_chars] m =
                                                                                                                                                                                                                                                                        let k [rev_onto,implode,explode,put_chars] xs =
                                                                                                                                                                                                                                                                          let lit = "\n" in
                                                                                                                                                                                                                                                                          let k [rev_onto,implode,explode,put_chars,xs] ys =
                                                                                                                                                                                                                                                                            let k [rev_onto,implode,explode,put_chars,xs] app =
                                                                                                                                                                                                                                                                              let con = Nil0 in
                                                                                                                                                                                                                                                                              let k [rev_onto,implode,explode,put_chars,xs,app] app =
                                                                                                                                                                                                                                                                                let k [rev_onto,implode,explode,put_chars,app] app =
                                                                                                                                                                                                                                                                                  let k [rev_onto,implode,explode,put_chars] app =
                                                                                                                                                                                                                                                                                    let k [rev_onto,implode,explode,put_chars] s2 =
                                                                                                                                                                                                                                                                                      let lit = "error: " in
                                                                                                                                                                                                                                                                                      let k [rev_onto,implode,explode,put_chars,s2] xs =
                                                                                                                                                                                                                                                                                        let k [rev_onto,implode,explode,put_chars,xs] ys =
                                                                                                                                                                                                                                                                                          let k [rev_onto,implode,explode,put_chars,xs] app =
                                                                                                                                                                                                                                                                                            let con = Nil0 in
                                                                                                                                                                                                                                                                                            let k [implode,explode,put_chars,xs,app] app =
                                                                                                                                                                                                                                                                                              let k [implode,explode,put_chars,app] app =
                                                                                                                                                                                                                                                                                                let k [implode,explode,put_chars] app =
                                                                                                                                                                                                                                                                                                  let k [explode,put_chars] s =
                                                                                                                                                                                                                                                                                                    let k [put_chars] app =
                                                                                                                                                                                                                                                                                                      let k [] _ =
                                                                                                                                                                                                                                                                                                        let con = Unit0 in
                                                                                                                                                                                                                                                                                                        let prim = PRIM_Crash(con) in
                                                                                                                                                                                                                                                                                                        k prim in
                                                                                                                                                                                                                                                                                                      put_chars app k in
                                                                                                                                                                                                                                                                                                    explode s k in
                                                                                                                                                                                                                                                                                                  implode app k in
                                                                                                                                                                                                                                                                                                app app k in
                                                                                                                                                                                                                                                                                              app xs k in
                                                                                                                                                                                                                                                                                            rev_onto con k in
                                                                                                                                                                                                                                                                                          rev_onto ys k in
                                                                                                                                                                                                                                                                                        explode s2 k in
                                                                                                                                                                                                                                                                                      explode lit k in
                                                                                                                                                                                                                                                                                    implode app k in
                                                                                                                                                                                                                                                                                  app app k in
                                                                                                                                                                                                                                                                                app xs k in
                                                                                                                                                                                                                                                                              rev_onto con k in
                                                                                                                                                                                                                                                                            rev_onto ys k in
                                                                                                                                                                                                                                                                          explode lit k in
                                                                                                                                                                                                                                                                        explode m k in
                                                                                                                                                                                                                                                                      implode app k in
                                                                                                                                                                                                                                                                    app app k in
                                                                                                                                                                                                                                                                  app xs k in
                                                                                                                                                                                                                                                                rev_onto con k in
                                                                                                                                                                                                                                                              rev_onto ys k in
                                                                                                                                                                                                                                                            explode s2 k in
                                                                                                                                                                                                                                                          explode lit k in
                                                                                                                                                                                                                                                        implode case k in
                                                                                                                                                                                                                                                      match prim with
                                                                                                                                                                                                                                                      | true1 ->
                                                                                                                                                                                                                                                        let con = Nil0 in
                                                                                                                                                                                                                                                        let con = Cons1['0',con] in
                                                                                                                                                                                                                                                        k con
                                                                                                                                                                                                                                                      | false0 ->
                                                                                                                                                                                                                                                        let con = Nil0 in
                                                                                                                                                                                                                                                        let k [secj] app = app secj k in
                                                                                                                                                                                                                                                        loop con k
                                                                                                                                                                                                                                                    | false0 ->
                                                                                                                                                                                                                                                      let loop = fix (fun [] loop acc k ->
                                                                                                                                                                                                                                                        let lam = fun [acc,loop] i k ->
                                                                                                                                                                                                                                                          let prim = PRIM_EqInt(i,0) in
                                                                                                                                                                                                                                                          match prim with
                                                                                                                                                                                                                                                          | true1 -> k acc
                                                                                                                                                                                                                                                          | false0 ->
                                                                                                                                                                                                                                                            let c = PRIM_ModInt(i,10) in
                                                                                                                                                                                                                                                            let x = PRIM_AddInt(48,c) in
                                                                                                                                                                                                                                                            let x = PRIM_CharChr(x) in
                                                                                                                                                                                                                                                            let con = Cons1[x,acc] in
                                                                                                                                                                                                                                                            let k [i] app =
                                                                                                                                                                                                                                                              let prim = PRIM_DivInt(i,10) in
                                                                                                                                                                                                                                                              app prim k in
                                                                                                                                                                                                                                                            loop con k in
                                                                                                                                                                                                                                                        k lam) in
                                                                                                                                                                                                                                                      let prim = PRIM_EqInt(secj,0) in
                                                                                                                                                                                                                                                      let k [rev_onto,implode,explode,put_chars,disk,secj,sector] case =
                                                                                                                                                                                                                                                        let k [rev_onto,implode,explode,put_chars,disk,secj,sector] s1 =
                                                                                                                                                                                                                                                          let k [rev_onto,implode,explode,put_chars,disk,secj,sector] xs =
                                                                                                                                                                                                                                                            let lit = "   **SLOW**" in
                                                                                                                                                                                                                                                            let k [rev_onto,implode,explode,put_chars,disk,secj,sector,xs] ys =
                                                                                                                                                                                                                                                              let k [rev_onto,implode,explode,put_chars,disk,secj,sector,xs] app =
                                                                                                                                                                                                                                                                let con = Nil0 in
                                                                                                                                                                                                                                                                let k [rev_onto,implode,explode,put_chars,disk,secj,sector,xs,app] app =
                                                                                                                                                                                                                                                                  let k [rev_onto,implode,explode,put_chars,disk,secj,sector,app] app =
                                                                                                                                                                                                                                                                    let k [rev_onto,implode,explode,put_chars,disk,secj,sector] app =
                                                                                                                                                                                                                                                                      let k [rev_onto,implode,explode,put_chars,disk,secj,sector] s2 =
                                                                                                                                                                                                                                                                        let lit = "write_sector " in
                                                                                                                                                                                                                                                                        let k [rev_onto,implode,explode,put_chars,disk,secj,sector,s2] xs =
                                                                                                                                                                                                                                                                          let k [rev_onto,implode,explode,put_chars,disk,secj,sector,xs] ys =
                                                                                                                                                                                                                                                                            let k [rev_onto,implode,explode,put_chars,disk,secj,sector,xs] app =
                                                                                                                                                                                                                                                                              let con = Nil0 in
                                                                                                                                                                                                                                                                              let k [rev_onto,implode,explode,put_chars,disk,secj,sector,xs,app] app =
                                                                                                                                                                                                                                                                                let k [rev_onto,implode,explode,put_chars,disk,secj,sector,app] app =
                                                                                                                                                                                                                                                                                  let k [rev_onto,implode,explode,put_chars,disk,secj,sector] app =
                                                                                                                                                                                                                                                                                    let k [rev_onto,implode,explode,put_chars,disk,secj,sector] m =
                                                                                                                                                                                                                                                                                      let k [rev_onto,implode,explode,put_chars,disk,secj,sector] xs =
                                                                                                                                                                                                                                                                                        let lit = "\n" in
                                                                                                                                                                                                                                                                                        let k [rev_onto,implode,explode,put_chars,disk,secj,sector,xs] ys =
                                                                                                                                                                                                                                                                                          let k [rev_onto,implode,explode,put_chars,disk,secj,sector,xs] app =
                                                                                                                                                                                                                                                                                            let con = Nil0 in
                                                                                                                                                                                                                                                                                            let k [rev_onto,implode,explode,put_chars,disk,secj,sector,xs,app] app =
                                                                                                                                                                                                                                                                                              let k [rev_onto,implode,explode,put_chars,disk,secj,sector,app] app =
                                                                                                                                                                                                                                                                                                let k [rev_onto,implode,explode,put_chars,disk,secj,sector] app =
                                                                                                                                                                                                                                                                                                  let k [rev_onto,implode,explode,put_chars,disk,secj,sector] s2 =
                                                                                                                                                                                                                                                                                                    let lit = "trace: " in
                                                                                                                                                                                                                                                                                                    let k [rev_onto,implode,explode,put_chars,disk,secj,sector,s2] xs =
                                                                                                                                                                                                                                                                                                      let k [rev_onto,implode,explode,put_chars,disk,secj,sector,xs] ys =
                                                                                                                                                                                                                                                                                                        let k [rev_onto,implode,explode,put_chars,disk,secj,sector,xs] app =
                                                                                                                                                                                                                                                                                                          let con = Nil0 in
                                                                                                                                                                                                                                                                                                          let k [implode,explode,put_chars,disk,secj,sector,xs,app] app =
                                                                                                                                                                                                                                                                                                            let k [implode,explode,put_chars,disk,secj,sector,app] app =
                                                                                                                                                                                                                                                                                                              let k [implode,explode,put_chars,disk,secj,sector] app =
                                                                                                                                                                                                                                                                                                                let k [explode,put_chars,disk,secj,sector] s =
                                                                                                                                                                                                                                                                                                                  let k [put_chars,disk,secj,sector] app =
                                                                                                                                                                                                                                                                                                                    let k [disk,secj,sector] _ =
                                                                                                                                                                                                                                                                                                                      let k [secj,sector] target =
                                                                                                                                                                                                                                                                                                                        let offset = PRIM_MulInt(secj,512) in
                                                                                                                                                                                                                                                                                                                        let k [target,offset] source =
                                                                                                                                                                                                                                                                                                                          let loop = fix (fun [target,offset,source] loop i k ->
                                                                                                                                                                                                                                                                                                                            let b = PRIM_LessInt(i,512) in
                                                                                                                                                                                                                                                                                                                            let k [target,offset,source,i,loop] case =
                                                                                                                                                                                                                                                                                                                              match case with
                                                                                                                                                                                                                                                                                                                              | true1 ->
                                                                                                                                                                                                                                                                                                                                let con = Unit0 in
                                                                                                                                                                                                                                                                                                                                k con
                                                                                                                                                                                                                                                                                                                              | false0 ->
                                                                                                                                                                                                                                                                                                                                let char = PRIM_GetBytes(source,i) in
                                                                                                                                                                                                                                                                                                                                let y = PRIM_AddInt(offset,i) in
                                                                                                                                                                                                                                                                                                                                let _ = PRIM_SetBytes(target,y,char) in
                                                                                                                                                                                                                                                                                                                                let prim = PRIM_AddInt(i,1) in
                                                                                                                                                                                                                                                                                                                                loop prim k in
                                                                                                                                                                                                                                                                                                                            match b with
                                                                                                                                                                                                                                                                                                                            | true1 ->
                                                                                                                                                                                                                                                                                                                              let con = false0 in
                                                                                                                                                                                                                                                                                                                              k con
                                                                                                                                                                                                                                                                                                                            | false0 ->
                                                                                                                                                                                                                                                                                                                              let con = true1 in
                                                                                                                                                                                                                                                                                                                              k con) in
                                                                                                                                                                                                                                                                                                                          loop 0 k in
                                                                                                                                                                                                                                                                                                                        match sector with
                                                                                                                                                                                                                                                                                                                        | Sector0(x) -> k x in
                                                                                                                                                                                                                                                                                                                      match disk with
                                                                                                                                                                                                                                                                                                                      | Disk0(x) -> k x in
                                                                                                                                                                                                                                                                                                                    put_chars app k in
                                                                                                                                                                                                                                                                                                                  explode s k in
                                                                                                                                                                                                                                                                                                                implode app k in
                                                                                                                                                                                                                                                                                                              app app k in
                                                                                                                                                                                                                                                                                                            app xs k in
                                                                                                                                                                                                                                                                                                          rev_onto con k in
                                                                                                                                                                                                                                                                                                        rev_onto ys k in
                                                                                                                                                                                                                                                                                                      explode s2 k in
                                                                                                                                                                                                                                                                                                    explode lit k in
                                                                                                                                                                                                                                                                                                  implode app k in
                                                                                                                                                                                                                                                                                                app app k in
                                                                                                                                                                                                                                                                                              app xs k in
                                                                                                                                                                                                                                                                                            rev_onto con k in
                                                                                                                                                                                                                                                                                          rev_onto ys k in
                                                                                                                                                                                                                                                                                        explode lit k in
                                                                                                                                                                                                                                                                                      explode m k in
                                                                                                                                                                                                                                                                                    implode app k in
                                                                                                                                                                                                                                                                                  app app k in
                                                                                                                                                                                                                                                                                app xs k in
                                                                                                                                                                                                                                                                              rev_onto con k in
                                                                                                                                                                                                                                                                            rev_onto ys k in
                                                                                                                                                                                                                                                                          explode s2 k in
                                                                                                                                                                                                                                                                        explode lit k in
                                                                                                                                                                                                                                                                      implode app k in
                                                                                                                                                                                                                                                                    app app k in
                                                                                                                                                                                                                                                                  app xs k in
                                                                                                                                                                                                                                                                rev_onto con k in
                                                                                                                                                                                                                                                              rev_onto ys k in
                                                                                                                                                                                                                                                            explode lit k in
                                                                                                                                                                                                                                                          explode s1 k in
                                                                                                                                                                                                                                                        implode case k in
                                                                                                                                                                                                                                                      match prim with
                                                                                                                                                                                                                                                      | true1 ->
                                                                                                                                                                                                                                                        let con = Nil0 in
                                                                                                                                                                                                                                                        let con = Cons1['0',con] in
                                                                                                                                                                                                                                                        k con
                                                                                                                                                                                                                                                      | false0 ->
                                                                                                                                                                                                                                                        let con = Nil0 in
                                                                                                                                                                                                                                                        let k [secj] app = app secj k in
                                                                                                                                                                                                                                                        loop con k in
                                                                                                                                                                                                                                                  match prim with
                                                                                                                                                                                                                                                  | true1 ->
                                                                                                                                                                                                                                                    let con = true1 in
                                                                                                                                                                                                                                                    k con
                                                                                                                                                                                                                                                  | false0 ->
                                                                                                                                                                                                                                                    let b = PRIM_LessInt(secj,32) in
                                                                                                                                                                                                                                                    match b with
                                                                                                                                                                                                                                                    | true1 ->
                                                                                                                                                                                                                                                      let con = false0 in
                                                                                                                                                                                                                                                      k con
                                                                                                                                                                                                                                                    | false0 ->
                                                                                                                                                                                                                                                      let con = true1 in
                                                                                                                                                                                                                                                      k con
                                                                                                                                                                                                                                                | false0 ->
                                                                                                                                                                                                                                                  let con = Unit0 in
                                                                                                                                                                                                                                                  k con in
                                                                                                                                                                                                                                        implode app k in
                                                                                                                                                                                                                                      app app k in
                                                                                                                                                                                                                                    app xs k in
                                                                                                                                                                                                                                  rev_onto con k in
                                                                                                                                                                                                                                rev_onto ys k in
                                                                                                                                                                                                                              explode s2 k in
                                                                                                                                                                                                                            explode lit k in
                                                                                                                                                                                                                          implode app k in
                                                                                                                                                                                                                        app app k in
                                                                                                                                                                                                                      app xs k in
                                                                                                                                                                                                                    rev_onto con k in
                                                                                                                                                                                                                  rev_onto ys k in
                                                                                                                                                                                                                explode s2 k in
                                                                                                                                                                                                              explode s1 k in
                                                                                                                                                                                                            implode app k in
                                                                                                                                                                                                          app app k in
                                                                                                                                                                                                        app xs k in
                                                                                                                                                                                                      rev_onto con k in
                                                                                                                                                                                                    rev_onto ys k in
                                                                                                                                                                                                  explode s2 k in
                                                                                                                                                                                                explode lit k in
                                                                                                                                                                                              implode app k in
                                                                                                                                                                                            app app k in
                                                                                                                                                                                          app xs k in
                                                                                                                                                                                        rev_onto con k in
                                                                                                                                                                                      rev_onto ys k in
                                                                                                                                                                                    explode s2 k in
                                                                                                                                                                                  explode s1 k in
                                                                                                                                                                                implode app k in
                                                                                                                                                                              app app k in
                                                                                                                                                                            app xs k in
                                                                                                                                                                          rev_onto con k in
                                                                                                                                                                        rev_onto ys k in
                                                                                                                                                                      explode s2 k in
                                                                                                                                                                    explode lit k in
                                                                                                                                                                  implode app k in
                                                                                                                                                                app 64 k in
                                                                                                                                                              loop con k in
                                                                                                                                                            implode case k in
                                                                                                                                                          match prim with
                                                                                                                                                          | true1 ->
                                                                                                                                                            let con = Nil0 in
                                                                                                                                                            let con = Cons1['0',con] in
                                                                                                                                                            k con
                                                                                                                                                          | false0 ->
                                                                                                                                                            let con = Nil0 in
                                                                                                                                                            let k [offset] app = app offset k in
                                                                                                                                                            loop con k in
                                                                                                                                                        implode case k in
                                                                                                                                                      match prim with
                                                                                                                                                      | true1 ->
                                                                                                                                                        let con = Nil0 in
                                                                                                                                                        let con = Cons1['0',con] in
                                                                                                                                                        k con
                                                                                                                                                      | false0 ->
                                                                                                                                                        let con = Nil0 in
                                                                                                                                                        let k [seci] app = app seci k in
                                                                                                                                                        loop con k in
                                                                                                                                                    match block with
                                                                                                                                                    | Block0(x) -> k x in
                                                                                                                                                  implode app k in
                                                                                                                                                app app k in
                                                                                                                                              app xs k in
                                                                                                                                            rev_onto con k in
                                                                                                                                          rev_onto ys k in
                                                                                                                                        explode s2 k in
                                                                                                                                      explode lit k in
                                                                                                                                    implode app k in
                                                                                                                                  app app k in
                                                                                                                                app xs k in
                                                                                                                              rev_onto con k in
                                                                                                                            rev_onto ys k in
                                                                                                                          explode s2 k in
                                                                                                                        explode s1 k in
                                                                                                                      implode app k in
                                                                                                                    app app k in
                                                                                                                  app xs k in
                                                                                                                rev_onto con k in
                                                                                                              rev_onto ys k in
                                                                                                            explode s2 k in
                                                                                                          explode lit k in
                                                                                                        implode app k in
                                                                                                      app app k in
                                                                                                    app xs k in
                                                                                                  rev_onto con k in
                                                                                                rev_onto ys k in
                                                                                              explode lit k in
                                                                                            explode s1 k in
                                                                                          implode case k in
                                                                                        match prim with
                                                                                        | true1 ->
                                                                                          let con = Nil0 in
                                                                                          let con = Cons1['0',con] in
                                                                                          k con
                                                                                        | false0 ->
                                                                                          let con = Nil0 in
                                                                                          let k [seci] app = app seci k in
                                                                                          loop con k in
                                                                                      implode case k in
                                                                                    match prim with
                                                                                    | true1 ->
                                                                                      let con = Nil0 in
                                                                                      let con = Cons1['0',con] in
                                                                                      k con
                                                                                    | false0 ->
                                                                                      let con = Nil0 in
                                                                                      let k [i] app = app i k in
                                                                                      loop con k in
                                                                                match prim with
                                                                                | true1 ->
                                                                                  let con = true1 in
                                                                                  k con
                                                                                | false0 ->
                                                                                  let b = PRIM_LessInt(i,256) in
                                                                                  match b with
                                                                                  | true1 ->
                                                                                    let con = false0 in
                                                                                    k con
                                                                                  | false0 ->
                                                                                    let con = true1 in
                                                                                    k con in
                                                                              implode app k in
                                                                            app 64 k in
                                                                          loop con k) in
                                                                      let k [rev_onto,implode,explode,put_chars,disk] _ =
                                                                        let loop = fix (fun [rev_onto,implode,explode,put_chars,disk] loop i k ->
                                                                          let prim = PRIM_LessInt(119,i) in
                                                                          match prim with
                                                                          | true1 ->
                                                                            let con = Unit0 in
                                                                            k con
                                                                          | false0 ->
                                                                            let loop = fix (fun [] loop acc k ->
                                                                              let lam = fun [acc,loop] i k ->
                                                                                let prim = PRIM_EqInt(i,0) in
                                                                                match prim with
                                                                                | true1 -> k acc
                                                                                | false0 ->
                                                                                  let con = Cons1['-',acc] in
                                                                                  let k [i] app =
                                                                                    let prim = PRIM_SubInt(i,1) in
                                                                                    app prim k in
                                                                                  loop con k in
                                                                              k lam) in
                                                                            let con = Nil0 in
                                                                            let k [rev_onto,implode,explode,put_chars,disk,i,loop] app =
                                                                              let k [rev_onto,implode,explode,put_chars,disk,i,loop] app =
                                                                                let k [rev_onto,implode,explode,put_chars,disk,i,loop] x =
                                                                                  let prim = PRIM_ThawBytes(x) in
                                                                                  let block = Block0[prim] in
                                                                                  let prim = PRIM_LessInt(i,0) in
                                                                                  let k [rev_onto,implode,explode,put_chars,disk,i,loop,block] case =
                                                                                    let k [i,loop] _ =
                                                                                      let prim = PRIM_AddInt(i,1) in
                                                                                      loop prim k in
                                                                                    match case with
                                                                                    | true1 ->
                                                                                      let loop = fix (fun [] loop acc k ->
                                                                                        let lam = fun [acc,loop] i k ->
                                                                                          let prim = PRIM_EqInt(i,0) in
                                                                                          match prim with
                                                                                          | true1 -> k acc
                                                                                          | false0 ->
                                                                                            let c = PRIM_ModInt(i,10) in
                                                                                            let x = PRIM_AddInt(48,c) in
                                                                                            let x = PRIM_CharChr(x) in
                                                                                            let con = Cons1[x,acc] in
                                                                                            let k [i] app =
                                                                                              let prim = PRIM_DivInt(i,10) in
                                                                                              app prim k in
                                                                                            loop con k in
                                                                                        k lam) in
                                                                                      let prim = PRIM_EqInt(i,0) in
                                                                                      let k [rev_onto,implode,explode,put_chars] case =
                                                                                        let k [rev_onto,implode,explode,put_chars] s2 =
                                                                                          let lit = "write_block " in
                                                                                          let k [rev_onto,implode,explode,put_chars,s2] xs =
                                                                                            let k [rev_onto,implode,explode,put_chars,xs] ys =
                                                                                              let k [rev_onto,implode,explode,put_chars,xs] app =
                                                                                                let con = Nil0 in
                                                                                                let k [rev_onto,implode,explode,put_chars,xs,app] app =
                                                                                                  let k [rev_onto,implode,explode,put_chars,app] app =
                                                                                                    let k [rev_onto,implode,explode,put_chars] app =
                                                                                                      let k [rev_onto,implode,explode,put_chars] m =
                                                                                                        let k [rev_onto,implode,explode,put_chars] xs =
                                                                                                          let lit = "\n" in
                                                                                                          let k [rev_onto,implode,explode,put_chars,xs] ys =
                                                                                                            let k [rev_onto,implode,explode,put_chars,xs] app =
                                                                                                              let con = Nil0 in
                                                                                                              let k [rev_onto,implode,explode,put_chars,xs,app] app =
                                                                                                                let k [rev_onto,implode,explode,put_chars,app] app =
                                                                                                                  let k [rev_onto,implode,explode,put_chars] app =
                                                                                                                    let k [rev_onto,implode,explode,put_chars] s2 =
                                                                                                                      let lit = "error: " in
                                                                                                                      let k [rev_onto,implode,explode,put_chars,s2] xs =
                                                                                                                        let k [rev_onto,implode,explode,put_chars,xs] ys =
                                                                                                                          let k [rev_onto,implode,explode,put_chars,xs] app =
                                                                                                                            let con = Nil0 in
                                                                                                                            let k [implode,explode,put_chars,xs,app] app =
                                                                                                                              let k [implode,explode,put_chars,app] app =
                                                                                                                                let k [implode,explode,put_chars] app =
                                                                                                                                  let k [explode,put_chars] s =
                                                                                                                                    let k [put_chars] app =
                                                                                                                                      let k [] _ =
                                                                                                                                        let con = Unit0 in
                                                                                                                                        let prim = PRIM_Crash(con) in
                                                                                                                                        k prim in
                                                                                                                                      put_chars app k in
                                                                                                                                    explode s k in
                                                                                                                                  implode app k in
                                                                                                                                app app k in
                                                                                                                              app xs k in
                                                                                                                            rev_onto con k in
                                                                                                                          rev_onto ys k in
                                                                                                                        explode s2 k in
                                                                                                                      explode lit k in
                                                                                                                    implode app k in
                                                                                                                  app app k in
                                                                                                                app xs k in
                                                                                                              rev_onto con k in
                                                                                                            rev_onto ys k in
                                                                                                          explode lit k in
                                                                                                        explode m k in
                                                                                                      implode app k in
                                                                                                    app app k in
                                                                                                  app xs k in
                                                                                                rev_onto con k in
                                                                                              rev_onto ys k in
                                                                                            explode s2 k in
                                                                                          explode lit k in
                                                                                        implode case k in
                                                                                      match prim with
                                                                                      | true1 ->
                                                                                        let con = Nil0 in
                                                                                        let con = Cons1['0',con] in
                                                                                        k con
                                                                                      | false0 ->
                                                                                        let con = Nil0 in
                                                                                        let k [i] app = app i k in
                                                                                        loop con k
                                                                                    | false0 ->
                                                                                      let seci = PRIM_DivInt(i,8) in
                                                                                      let loop = fix (fun [] loop acc k ->
                                                                                        let lam = fun [acc,loop] i k ->
                                                                                          let prim = PRIM_EqInt(i,0) in
                                                                                          match prim with
                                                                                          | true1 -> k acc
                                                                                          | false0 ->
                                                                                            let c = PRIM_ModInt(i,10) in
                                                                                            let x = PRIM_AddInt(48,c) in
                                                                                            let x = PRIM_CharChr(x) in
                                                                                            let con = Cons1[x,acc] in
                                                                                            let k [i] app =
                                                                                              let prim = PRIM_DivInt(i,10) in
                                                                                              app prim k in
                                                                                            loop con k in
                                                                                        k lam) in
                                                                                      let prim = PRIM_EqInt(i,0) in
                                                                                      let k [rev_onto,implode,explode,put_chars,disk,i,block,seci] case =
                                                                                        let k [rev_onto,implode,explode,put_chars,disk,i,block,seci] s1 =
                                                                                          let loop = fix (fun [] loop acc k ->
                                                                                            let lam = fun [acc,loop] i k ->
                                                                                              let prim = PRIM_EqInt(i,0) in
                                                                                              match prim with
                                                                                              | true1 -> k acc
                                                                                              | false0 ->
                                                                                                let c = PRIM_ModInt(i,10) in
                                                                                                let x = PRIM_AddInt(48,c) in
                                                                                                let x = PRIM_CharChr(x) in
                                                                                                let con = Cons1[x,acc] in
                                                                                                let k [i] app =
                                                                                                  let prim = PRIM_DivInt(i,10) in
                                                                                                  app prim k in
                                                                                                loop con k in
                                                                                            k lam) in
                                                                                          let prim = PRIM_EqInt(seci,0) in
                                                                                          let k [rev_onto,implode,explode,put_chars,disk,i,block,seci,s1] case =
                                                                                            let k [rev_onto,implode,explode,put_chars,disk,i,block,seci,s1] s1 =
                                                                                              let k [rev_onto,implode,explode,put_chars,disk,i,block,seci,s1] xs =
                                                                                                let lit = "]" in
                                                                                                let k [rev_onto,implode,explode,put_chars,disk,i,block,seci,s1,xs] ys =
                                                                                                  let k [rev_onto,implode,explode,put_chars,disk,i,block,seci,s1,xs] app =
                                                                                                    let con = Nil0 in
                                                                                                    let k [rev_onto,implode,explode,put_chars,disk,i,block,seci,s1,xs,app] app =
                                                                                                      let k [rev_onto,implode,explode,put_chars,disk,i,block,seci,s1,app] app =
                                                                                                        let k [rev_onto,implode,explode,put_chars,disk,i,block,seci,s1] app =
                                                                                                          let k [rev_onto,implode,explode,put_chars,disk,i,block,seci,s1] s2 =
                                                                                                            let lit = "[" in
                                                                                                            let k [rev_onto,implode,explode,put_chars,disk,i,block,seci,s1,s2] xs =
                                                                                                              let k [rev_onto,implode,explode,put_chars,disk,i,block,seci,s1,xs] ys =
                                                                                                                let k [rev_onto,implode,explode,put_chars,disk,i,block,seci,s1,xs] app =
                                                                                                                  let con = Nil0 in
                                                                                                                  let k [rev_onto,implode,explode,put_chars,disk,i,block,seci,s1,xs,app] app =
                                                                                                                    let k [rev_onto,implode,explode,put_chars,disk,i,block,seci,s1,app] app =
                                                                                                                      let k [rev_onto,implode,explode,put_chars,disk,i,block,seci,s1] app =
                                                                                                                        let k [rev_onto,implode,explode,put_chars,disk,i,block,seci,s1] s2 =
                                                                                                                          let k [rev_onto,implode,explode,put_chars,disk,i,block,seci,s2] xs =
                                                                                                                            let k [rev_onto,implode,explode,put_chars,disk,i,block,seci,xs] ys =
                                                                                                                              let k [rev_onto,implode,explode,put_chars,disk,i,block,seci,xs] app =
                                                                                                                                let con = Nil0 in
                                                                                                                                let k [rev_onto,implode,explode,put_chars,disk,i,block,seci,xs,app] app =
                                                                                                                                  let k [rev_onto,implode,explode,put_chars,disk,i,block,seci,app] app =
                                                                                                                                    let k [rev_onto,implode,explode,put_chars,disk,i,block,seci] app =
                                                                                                                                      let k [rev_onto,implode,explode,put_chars,disk,i,block,seci] s2 =
                                                                                                                                        let lit = "write_block " in
                                                                                                                                        let k [rev_onto,implode,explode,put_chars,disk,i,block,seci,s2] xs =
                                                                                                                                          let k [rev_onto,implode,explode,put_chars,disk,i,block,seci,xs] ys =
                                                                                                                                            let k [rev_onto,implode,explode,put_chars,disk,i,block,seci,xs] app =
                                                                                                                                              let con = Nil0 in
                                                                                                                                              let k [rev_onto,implode,explode,put_chars,disk,i,block,seci,xs,app] app =
                                                                                                                                                let k [rev_onto,implode,explode,put_chars,disk,i,block,seci,app] app =
                                                                                                                                                  let k [rev_onto,implode,explode,put_chars,disk,i,block,seci] app =
                                                                                                                                                    let k [rev_onto,implode,explode,put_chars,disk,i,block,seci] m =
                                                                                                                                                      let y = PRIM_ModInt(i,8) in
                                                                                                                                                      let offset = PRIM_MulInt(64,y) in
                                                                                                                                                      let k [rev_onto,implode,explode,put_chars,disk,seci,offset] new_bytes =
                                                                                                                                                        let loop = fix (fun [] loop acc k ->
                                                                                                                                                          let lam = fun [acc,loop] i k ->
                                                                                                                                                            let prim = PRIM_EqInt(i,0) in
                                                                                                                                                            match prim with
                                                                                                                                                            | true1 -> k acc
                                                                                                                                                            | false0 ->
                                                                                                                                                              let c = PRIM_ModInt(i,10) in
                                                                                                                                                              let x = PRIM_AddInt(48,c) in
                                                                                                                                                              let x = PRIM_CharChr(x) in
                                                                                                                                                              let con = Cons1[x,acc] in
                                                                                                                                                              let k [i] app =
                                                                                                                                                                let prim = PRIM_DivInt(i,10) in
                                                                                                                                                                app prim k in
                                                                                                                                                              loop con k in
                                                                                                                                                          k lam) in
                                                                                                                                                        let prim = PRIM_EqInt(seci,0) in
                                                                                                                                                        let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes] case =
                                                                                                                                                          let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes] s1 =
                                                                                                                                                            let loop = fix (fun [] loop acc k ->
                                                                                                                                                              let lam = fun [acc,loop] i k ->
                                                                                                                                                                let prim = PRIM_EqInt(i,0) in
                                                                                                                                                                match prim with
                                                                                                                                                                | true1 -> k acc
                                                                                                                                                                | false0 ->
                                                                                                                                                                  let c = PRIM_ModInt(i,10) in
                                                                                                                                                                  let x = PRIM_AddInt(48,c) in
                                                                                                                                                                  let x = PRIM_CharChr(x) in
                                                                                                                                                                  let con = Cons1[x,acc] in
                                                                                                                                                                  let k [i] app =
                                                                                                                                                                    let prim = PRIM_DivInt(i,10) in
                                                                                                                                                                    app prim k in
                                                                                                                                                                  loop con k in
                                                                                                                                                              k lam) in
                                                                                                                                                            let prim = PRIM_EqInt(offset,0) in
                                                                                                                                                            let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes,s1] case =
                                                                                                                                                              let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes,s1] s1 =
                                                                                                                                                                let loop = fix (fun [] loop acc k ->
                                                                                                                                                                  let lam = fun [acc,loop] i k ->
                                                                                                                                                                    let prim = PRIM_EqInt(i,0) in
                                                                                                                                                                    match prim with
                                                                                                                                                                    | true1 -> k acc
                                                                                                                                                                    | false0 ->
                                                                                                                                                                      let c = PRIM_ModInt(i,10) in
                                                                                                                                                                      let x = PRIM_AddInt(48,c) in
                                                                                                                                                                      let x = PRIM_CharChr(x) in
                                                                                                                                                                      let con = Cons1[x,acc] in
                                                                                                                                                                      let k [i] app =
                                                                                                                                                                        let prim = PRIM_DivInt(i,10) in
                                                                                                                                                                        app prim k in
                                                                                                                                                                      loop con k in
                                                                                                                                                                  k lam) in
                                                                                                                                                                let con = Nil0 in
                                                                                                                                                                let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes,s1,s1] app =
                                                                                                                                                                  let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes,s1,s1] app =
                                                                                                                                                                    let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes,s1,s1] s2 =
                                                                                                                                                                      let lit = ", len=" in
                                                                                                                                                                      let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes,s1,s1,s2] xs =
                                                                                                                                                                        let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes,s1,s1,xs] ys =
                                                                                                                                                                          let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes,s1,s1,xs] app =
                                                                                                                                                                            let con = Nil0 in
                                                                                                                                                                            let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes,s1,s1,xs,app] app =
                                                                                                                                                                              let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes,s1,s1,app] app =
                                                                                                                                                                                let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes,s1,s1] app =
                                                                                                                                                                                  let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes,s1,s1] s2 =
                                                                                                                                                                                    let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes,s1,s2] xs =
                                                                                                                                                                                      let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes,s1,xs] ys =
                                                                                                                                                                                        let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes,s1,xs] app =
                                                                                                                                                                                          let con = Nil0 in
                                                                                                                                                                                          let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes,s1,xs,app] app =
                                                                                                                                                                                            let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes,s1,app] app =
                                                                                                                                                                                              let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes,s1] app =
                                                                                                                                                                                                let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes,s1] s2 =
                                                                                                                                                                                                  let lit = ", offset=" in
                                                                                                                                                                                                  let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes,s1,s2] xs =
                                                                                                                                                                                                    let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes,s1,xs] ys =
                                                                                                                                                                                                      let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes,s1,xs] app =
                                                                                                                                                                                                        let con = Nil0 in
                                                                                                                                                                                                        let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes,s1,xs,app] app =
                                                                                                                                                                                                          let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes,s1,app] app =
                                                                                                                                                                                                            let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes,s1] app =
                                                                                                                                                                                                              let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes,s1] s2 =
                                                                                                                                                                                                                let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes,s2] xs =
                                                                                                                                                                                                                  let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes,xs] ys =
                                                                                                                                                                                                                    let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes,xs] app =
                                                                                                                                                                                                                      let con = Nil0 in
                                                                                                                                                                                                                      let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes,xs,app] app =
                                                                                                                                                                                                                        let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes,app] app =
                                                                                                                                                                                                                          let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes] app =
                                                                                                                                                                                                                            let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes] s2 =
                                                                                                                                                                                                                              let lit = "update_sectorC1 seci=" in
                                                                                                                                                                                                                              let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes,s2] xs =
                                                                                                                                                                                                                                let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes,xs] ys =
                                                                                                                                                                                                                                  let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes,xs] app =
                                                                                                                                                                                                                                    let con = Nil0 in
                                                                                                                                                                                                                                    let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes,xs,app] app =
                                                                                                                                                                                                                                      let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes,app] app =
                                                                                                                                                                                                                                        let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes] app =
                                                                                                                                                                                                                                          let k [rev_onto,implode,explode,put_chars,disk,seci,offset,new_bytes] m =
                                                                                                                                                                                                                                            match disk with
                                                                                                                                                                                                                                            | DiskC10(disk,r) ->
                                                                                                                                                                                                                                              let cache_line = PRIM_DeRef(r) in
                                                                                                                                                                                                                                              match cache_line with
                                                                                                                                                                                                                                              | Cache_Line0(dirty,secj,sector) ->
                                                                                                                                                                                                                                                let prim = PRIM_EqInt(seci,secj) in
                                                                                                                                                                                                                                                match prim with
                                                                                                                                                                                                                                                | true1 ->
                                                                                                                                                                                                                                                  let k [offset,new_bytes,dirty] target =
                                                                                                                                                                                                                                                    let loop = fix (fun [offset,new_bytes,target] loop i k ->
                                                                                                                                                                                                                                                      let b = PRIM_LessInt(i,64) in
                                                                                                                                                                                                                                                      let k [offset,new_bytes,target,i,loop] case =
                                                                                                                                                                                                                                                        match case with
                                                                                                                                                                                                                                                        | true1 ->
                                                                                                                                                                                                                                                          let con = Unit0 in
                                                                                                                                                                                                                                                          k con
                                                                                                                                                                                                                                                        | false0 ->
                                                                                                                                                                                                                                                          let char = PRIM_GetBytes(new_bytes,i) in
                                                                                                                                                                                                                                                          let y = PRIM_AddInt(offset,i) in
                                                                                                                                                                                                                                                          let _ = PRIM_SetBytes(target,y,char) in
                                                                                                                                                                                                                                                          let prim = PRIM_AddInt(i,1) in
                                                                                                                                                                                                                                                          loop prim k in
                                                                                                                                                                                                                                                      match b with
                                                                                                                                                                                                                                                      | true1 ->
                                                                                                                                                                                                                                                        let con = false0 in
                                                                                                                                                                                                                                                        k con
                                                                                                                                                                                                                                                      | false0 ->
                                                                                                                                                                                                                                                        let con = true1 in
                                                                                                                                                                                                                                                        k con) in
                                                                                                                                                                                                                                                    let k [dirty] _ =
                                                                                                                                                                                                                                                      let con = true1 in
                                                                                                                                                                                                                                                      let prim = PRIM_SetRef(dirty,con) in
                                                                                                                                                                                                                                                      k prim in
                                                                                                                                                                                                                                                    loop 0 k in
                                                                                                                                                                                                                                                  match sector with
                                                                                                                                                                                                                                                  | Sector0(x) -> k x
                                                                                                                                                                                                                                                | false0 ->
                                                                                                                                                                                                                                                  let prim = PRIM_DeRef(dirty) in
                                                                                                                                                                                                                                                  let k [rev_onto,implode,explode,put_chars,seci,offset,new_bytes,disk,r] _ =
                                                                                                                                                                                                                                                    let prim = PRIM_LessInt(seci,0) in
                                                                                                                                                                                                                                                    let k [rev_onto,implode,explode,put_chars,seci,offset,new_bytes,disk,r] case =
                                                                                                                                                                                                                                                      let k [seci,offset,new_bytes,r] sector =
                                                                                                                                                                                                                                                        let k [seci,offset,new_bytes,r,sector] target =
                                                                                                                                                                                                                                                          let loop = fix (fun [offset,new_bytes,target] loop i k ->
                                                                                                                                                                                                                                                            let b = PRIM_LessInt(i,64) in
                                                                                                                                                                                                                                                            let k [offset,new_bytes,target,i,loop] case =
                                                                                                                                                                                                                                                              match case with
                                                                                                                                                                                                                                                              | true1 ->
                                                                                                                                                                                                                                                                let con = Unit0 in
                                                                                                                                                                                                                                                                k con
                                                                                                                                                                                                                                                              | false0 ->
                                                                                                                                                                                                                                                                let char = PRIM_GetBytes(new_bytes,i) in
                                                                                                                                                                                                                                                                let y = PRIM_AddInt(offset,i) in
                                                                                                                                                                                                                                                                let _ = PRIM_SetBytes(target,y,char) in
                                                                                                                                                                                                                                                                let prim = PRIM_AddInt(i,1) in
                                                                                                                                                                                                                                                                loop prim k in
                                                                                                                                                                                                                                                            match b with
                                                                                                                                                                                                                                                            | true1 ->
                                                                                                                                                                                                                                                              let con = false0 in
                                                                                                                                                                                                                                                              k con
                                                                                                                                                                                                                                                            | false0 ->
                                                                                                                                                                                                                                                              let con = true1 in
                                                                                                                                                                                                                                                              k con) in
                                                                                                                                                                                                                                                          let k [seci,r,sector] _ =
                                                                                                                                                                                                                                                            let con = true1 in
                                                                                                                                                                                                                                                            let prim = PRIM_MakeRef(con) in
                                                                                                                                                                                                                                                            let cache_line = Cache_Line0[prim,seci,sector] in
                                                                                                                                                                                                                                                            let prim = PRIM_SetRef(r,cache_line) in
                                                                                                                                                                                                                                                            k prim in
                                                                                                                                                                                                                                                          loop 0 k in
                                                                                                                                                                                                                                                        match sector with
                                                                                                                                                                                                                                                        | Sector0(x) -> k x in
                                                                                                                                                                                                                                                      match case with
                                                                                                                                                                                                                                                      | true1 ->
                                                                                                                                                                                                                                                        let loop = fix (fun [] loop acc k ->
                                                                                                                                                                                                                                                          let lam = fun [acc,loop] i k ->
                                                                                                                                                                                                                                                            let prim = PRIM_EqInt(i,0) in
                                                                                                                                                                                                                                                            match prim with
                                                                                                                                                                                                                                                            | true1 -> k acc
                                                                                                                                                                                                                                                            | false0 ->
                                                                                                                                                                                                                                                              let c = PRIM_ModInt(i,10) in
                                                                                                                                                                                                                                                              let x = PRIM_AddInt(48,c) in
                                                                                                                                                                                                                                                              let x = PRIM_CharChr(x) in
                                                                                                                                                                                                                                                              let con = Cons1[x,acc] in
                                                                                                                                                                                                                                                              let k [i] app =
                                                                                                                                                                                                                                                                let prim = PRIM_DivInt(i,10) in
                                                                                                                                                                                                                                                                app prim k in
                                                                                                                                                                                                                                                              loop con k in
                                                                                                                                                                                                                                                          k lam) in
                                                                                                                                                                                                                                                        let prim = PRIM_EqInt(seci,0) in
                                                                                                                                                                                                                                                        let k [rev_onto,implode,explode,put_chars] case =
                                                                                                                                                                                                                                                          let k [rev_onto,implode,explode,put_chars] s2 =
                                                                                                                                                                                                                                                            let lit = "read_sector " in
                                                                                                                                                                                                                                                            let k [rev_onto,implode,explode,put_chars,s2] xs =
                                                                                                                                                                                                                                                              let k [rev_onto,implode,explode,put_chars,xs] ys =
                                                                                                                                                                                                                                                                let k [rev_onto,implode,explode,put_chars,xs] app =
                                                                                                                                                                                                                                                                  let con = Nil0 in
                                                                                                                                                                                                                                                                  let k [rev_onto,implode,explode,put_chars,xs,app] app =
                                                                                                                                                                                                                                                                    let k [rev_onto,implode,explode,put_chars,app] app =
                                                                                                                                                                                                                                                                      let k [rev_onto,implode,explode,put_chars] app =
                                                                                                                                                                                                                                                                        let k [rev_onto,implode,explode,put_chars] m =
                                                                                                                                                                                                                                                                          let k [rev_onto,implode,explode,put_chars] xs =
                                                                                                                                                                                                                                                                            let lit = "\n" in
                                                                                                                                                                                                                                                                            let k [rev_onto,implode,explode,put_chars,xs] ys =
                                                                                                                                                                                                                                                                              let k [rev_onto,implode,explode,put_chars,xs] app =
                                                                                                                                                                                                                                                                                let con = Nil0 in
                                                                                                                                                                                                                                                                                let k [rev_onto,implode,explode,put_chars,xs,app] app =
                                                                                                                                                                                                                                                                                  let k [rev_onto,implode,explode,put_chars,app] app =
                                                                                                                                                                                                                                                                                    let k [rev_onto,implode,explode,put_chars] app =
                                                                                                                                                                                                                                                                                      let k [rev_onto,implode,explode,put_chars] s2 =
                                                                                                                                                                                                                                                                                        let lit = "error: " in
                                                                                                                                                                                                                                                                                        let k [rev_onto,implode,explode,put_chars,s2] xs =
                                                                                                                                                                                                                                                                                          let k [rev_onto,implode,explode,put_chars,xs] ys =
                                                                                                                                                                                                                                                                                            let k [rev_onto,implode,explode,put_chars,xs] app =
                                                                                                                                                                                                                                                                                              let con = Nil0 in
                                                                                                                                                                                                                                                                                              let k [implode,explode,put_chars,xs,app] app =
                                                                                                                                                                                                                                                                                                let k [implode,explode,put_chars,app] app =
                                                                                                                                                                                                                                                                                                  let k [implode,explode,put_chars] app =
                                                                                                                                                                                                                                                                                                    let k [explode,put_chars] s =
                                                                                                                                                                                                                                                                                                      let k [put_chars] app =
                                                                                                                                                                                                                                                                                                        let k [] _ =
                                                                                                                                                                                                                                                                                                          let con = Unit0 in
                                                                                                                                                                                                                                                                                                          let prim = PRIM_Crash(con) in
                                                                                                                                                                                                                                                                                                          k prim in
                                                                                                                                                                                                                                                                                                        put_chars app k in
                                                                                                                                                                                                                                                                                                      explode s k in
                                                                                                                                                                                                                                                                                                    implode app k in
                                                                                                                                                                                                                                                                                                  app app k in
                                                                                                                                                                                                                                                                                                app xs k in
                                                                                                                                                                                                                                                                                              rev_onto con k in
                                                                                                                                                                                                                                                                                            rev_onto ys k in
                                                                                                                                                                                                                                                                                          explode s2 k in
                                                                                                                                                                                                                                                                                        explode lit k in
                                                                                                                                                                                                                                                                                      implode app k in
                                                                                                                                                                                                                                                                                    app app k in
                                                                                                                                                                                                                                                                                  app xs k in
                                                                                                                                                                                                                                                                                rev_onto con k in
                                                                                                                                                                                                                                                                              rev_onto ys k in
                                                                                                                                                                                                                                                                            explode lit k in
                                                                                                                                                                                                                                                                          explode m k in
                                                                                                                                                                                                                                                                        implode app k in
                                                                                                                                                                                                                                                                      app app k in
                                                                                                                                                                                                                                                                    app xs k in
                                                                                                                                                                                                                                                                  rev_onto con k in
                                                                                                                                                                                                                                                                rev_onto ys k in
                                                                                                                                                                                                                                                              explode s2 k in
                                                                                                                                                                                                                                                            explode lit k in
                                                                                                                                                                                                                                                          implode case k in
                                                                                                                                                                                                                                                        match prim with
                                                                                                                                                                                                                                                        | true1 ->
                                                                                                                                                                                                                                                          let con = Nil0 in
                                                                                                                                                                                                                                                          let con = Cons1['0',con] in
                                                                                                                                                                                                                                                          k con
                                                                                                                                                                                                                                                        | false0 ->
                                                                                                                                                                                                                                                          let con = Nil0 in
                                                                                                                                                                                                                                                          let k [seci] app = app seci k in
                                                                                                                                                                                                                                                          loop con k
                                                                                                                                                                                                                                                      | false0 ->
                                                                                                                                                                                                                                                        let loop = fix (fun [] loop acc k ->
                                                                                                                                                                                                                                                          let lam = fun [acc,loop] i k ->
                                                                                                                                                                                                                                                            let prim = PRIM_EqInt(i,0) in
                                                                                                                                                                                                                                                            match prim with
                                                                                                                                                                                                                                                            | true1 -> k acc
                                                                                                                                                                                                                                                            | false0 ->
                                                                                                                                                                                                                                                              let c = PRIM_ModInt(i,10) in
                                                                                                                                                                                                                                                              let x = PRIM_AddInt(48,c) in
                                                                                                                                                                                                                                                              let x = PRIM_CharChr(x) in
                                                                                                                                                                                                                                                              let con = Cons1[x,acc] in
                                                                                                                                                                                                                                                              let k [i] app =
                                                                                                                                                                                                                                                                let prim = PRIM_DivInt(i,10) in
                                                                                                                                                                                                                                                                app prim k in
                                                                                                                                                                                                                                                              loop con k in
                                                                                                                                                                                                                                                          k lam) in
                                                                                                                                                                                                                                                        let prim = PRIM_EqInt(seci,0) in
                                                                                                                                                                                                                                                        let k [rev_onto,implode,explode,put_chars,seci,disk] case =
                                                                                                                                                                                                                                                          let k [rev_onto,implode,explode,put_chars,seci,disk] s1 =
                                                                                                                                                                                                                                                            let k [rev_onto,implode,explode,put_chars,seci,disk] xs =
                                                                                                                                                                                                                                                              let lit = "   **SLOW**" in
                                                                                                                                                                                                                                                              let k [rev_onto,implode,explode,put_chars,seci,disk,xs] ys =
                                                                                                                                                                                                                                                                let k [rev_onto,implode,explode,put_chars,seci,disk,xs] app =
                                                                                                                                                                                                                                                                  let con = Nil0 in
                                                                                                                                                                                                                                                                  let k [rev_onto,implode,explode,put_chars,seci,disk,xs,app] app =
                                                                                                                                                                                                                                                                    let k [rev_onto,implode,explode,put_chars,seci,disk,app] app =
                                                                                                                                                                                                                                                                      let k [rev_onto,implode,explode,put_chars,seci,disk] app =
                                                                                                                                                                                                                                                                        let k [rev_onto,implode,explode,put_chars,seci,disk] s2 =
                                                                                                                                                                                                                                                                          let lit = "read_sector " in
                                                                                                                                                                                                                                                                          let k [rev_onto,implode,explode,put_chars,seci,disk,s2] xs =
                                                                                                                                                                                                                                                                            let k [rev_onto,implode,explode,put_chars,seci,disk,xs] ys =
                                                                                                                                                                                                                                                                              let k [rev_onto,implode,explode,put_chars,seci,disk,xs] app =
                                                                                                                                                                                                                                                                                let con = Nil0 in
                                                                                                                                                                                                                                                                                let k [rev_onto,implode,explode,put_chars,seci,disk,xs,app] app =
                                                                                                                                                                                                                                                                                  let k [rev_onto,implode,explode,put_chars,seci,disk,app] app =
                                                                                                                                                                                                                                                                                    let k [rev_onto,implode,explode,put_chars,seci,disk] app =
                                                                                                                                                                                                                                                                                      let k [rev_onto,implode,explode,put_chars,seci,disk] m =
                                                                                                                                                                                                                                                                                        let k [rev_onto,implode,explode,put_chars,seci,disk] xs =
                                                                                                                                                                                                                                                                                          let lit = "\n" in
                                                                                                                                                                                                                                                                                          let k [rev_onto,implode,explode,put_chars,seci,disk,xs] ys =
                                                                                                                                                                                                                                                                                            let k [rev_onto,implode,explode,put_chars,seci,disk,xs] app =
                                                                                                                                                                                                                                                                                              let con = Nil0 in
                                                                                                                                                                                                                                                                                              let k [rev_onto,implode,explode,put_chars,seci,disk,xs,app] app =
                                                                                                                                                                                                                                                                                                let k [rev_onto,implode,explode,put_chars,seci,disk,app] app =
                                                                                                                                                                                                                                                                                                  let k [rev_onto,implode,explode,put_chars,seci,disk] app =
                                                                                                                                                                                                                                                                                                    let k [rev_onto,implode,explode,put_chars,seci,disk] s2 =
                                                                                                                                                                                                                                                                                                      let lit = "trace: " in
                                                                                                                                                                                                                                                                                                      let k [rev_onto,implode,explode,put_chars,seci,disk,s2] xs =
                                                                                                                                                                                                                                                                                                        let k [rev_onto,implode,explode,put_chars,seci,disk,xs] ys =
                                                                                                                                                                                                                                                                                                          let k [rev_onto,implode,explode,put_chars,seci,disk,xs] app =
                                                                                                                                                                                                                                                                                                            let con = Nil0 in
                                                                                                                                                                                                                                                                                                            let k [implode,explode,put_chars,seci,disk,xs,app] app =
                                                                                                                                                                                                                                                                                                              let k [implode,explode,put_chars,seci,disk,app] app =
                                                                                                                                                                                                                                                                                                                let k [implode,explode,put_chars,seci,disk] app =
                                                                                                                                                                                                                                                                                                                  let k [explode,put_chars,seci,disk] s =
                                                                                                                                                                                                                                                                                                                    let k [put_chars,seci,disk] app =
                                                                                                                                                                                                                                                                                                                      let k [seci,disk] _ =
                                                                                                                                                                                                                                                                                                                        let k [seci] source =
                                                                                                                                                                                                                                                                                                                          let offset = PRIM_MulInt(seci,512) in
                                                                                                                                                                                                                                                                                                                          let target = PRIM_MakeBytes(512) in
                                                                                                                                                                                                                                                                                                                          let loop = fix (fun [source,offset,target] loop i k ->
                                                                                                                                                                                                                                                                                                                            let b = PRIM_LessInt(i,512) in
                                                                                                                                                                                                                                                                                                                            let k [source,offset,target,i,loop] case =
                                                                                                                                                                                                                                                                                                                              match case with
                                                                                                                                                                                                                                                                                                                              | true1 ->
                                                                                                                                                                                                                                                                                                                                let con = Unit0 in
                                                                                                                                                                                                                                                                                                                                k con
                                                                                                                                                                                                                                                                                                                              | false0 ->
                                                                                                                                                                                                                                                                                                                                let y = PRIM_AddInt(offset,i) in
                                                                                                                                                                                                                                                                                                                                let char = PRIM_GetBytes(source,y) in
                                                                                                                                                                                                                                                                                                                                let _ = PRIM_SetBytes(target,i,char) in
                                                                                                                                                                                                                                                                                                                                let prim = PRIM_AddInt(i,1) in
                                                                                                                                                                                                                                                                                                                                loop prim k in
                                                                                                                                                                                                                                                                                                                            match b with
                                                                                                                                                                                                                                                                                                                            | true1 ->
                                                                                                                                                                                                                                                                                                                              let con = false0 in
                                                                                                                                                                                                                                                                                                                              k con
                                                                                                                                                                                                                                                                                                                            | false0 ->
                                                                                                                                                                                                                                                                                                                              let con = true1 in
                                                                                                                                                                                                                                                                                                                              k con) in
                                                                                                                                                                                                                                                                                                                          let k [target] _ =
                                                                                                                                                                                                                                                                                                                            let con = Sector0[target] in
                                                                                                                                                                                                                                                                                                                            k con in
                                                                                                                                                                                                                                                                                                                          loop 0 k in
                                                                                                                                                                                                                                                                                                                        match disk with
                                                                                                                                                                                                                                                                                                                        | Disk0(x) -> k x in
                                                                                                                                                                                                                                                                                                                      put_chars app k in
                                                                                                                                                                                                                                                                                                                    explode s k in
                                                                                                                                                                                                                                                                                                                  implode app k in
                                                                                                                                                                                                                                                                                                                app app k in
                                                                                                                                                                                                                                                                                                              app xs k in
                                                                                                                                                                                                                                                                                                            rev_onto con k in
                                                                                                                                                                                                                                                                                                          rev_onto ys k in
                                                                                                                                                                                                                                                                                                        explode s2 k in
                                                                                                                                                                                                                                                                                                      explode lit k in
                                                                                                                                                                                                                                                                                                    implode app k in
                                                                                                                                                                                                                                                                                                  app app k in
                                                                                                                                                                                                                                                                                                app xs k in
                                                                                                                                                                                                                                                                                              rev_onto con k in
                                                                                                                                                                                                                                                                                            rev_onto ys k in
                                                                                                                                                                                                                                                                                          explode lit k in
                                                                                                                                                                                                                                                                                        explode m k in
                                                                                                                                                                                                                                                                                      implode app k in
                                                                                                                                                                                                                                                                                    app app k in
                                                                                                                                                                                                                                                                                  app xs k in
                                                                                                                                                                                                                                                                                rev_onto con k in
                                                                                                                                                                                                                                                                              rev_onto ys k in
                                                                                                                                                                                                                                                                            explode s2 k in
                                                                                                                                                                                                                                                                          explode lit k in
                                                                                                                                                                                                                                                                        implode app k in
                                                                                                                                                                                                                                                                      app app k in
                                                                                                                                                                                                                                                                    app xs k in
                                                                                                                                                                                                                                                                  rev_onto con k in
                                                                                                                                                                                                                                                                rev_onto ys k in
                                                                                                                                                                                                                                                              explode lit k in
                                                                                                                                                                                                                                                            explode s1 k in
                                                                                                                                                                                                                                                          implode case k in
                                                                                                                                                                                                                                                        match prim with
                                                                                                                                                                                                                                                        | true1 ->
                                                                                                                                                                                                                                                          let con = Nil0 in
                                                                                                                                                                                                                                                          let con = Cons1['0',con] in
                                                                                                                                                                                                                                                          k con
                                                                                                                                                                                                                                                        | false0 ->
                                                                                                                                                                                                                                                          let con = Nil0 in
                                                                                                                                                                                                                                                          let k [seci] app = app seci k in
                                                                                                                                                                                                                                                          loop con k in
                                                                                                                                                                                                                                                    match prim with
                                                                                                                                                                                                                                                    | true1 ->
                                                                                                                                                                                                                                                      let con = true1 in
                                                                                                                                                                                                                                                      k con
                                                                                                                                                                                                                                                    | false0 ->
                                                                                                                                                                                                                                                      let b = PRIM_LessInt(seci,32) in
                                                                                                                                                                                                                                                      match b with
                                                                                                                                                                                                                                                      | true1 ->
                                                                                                                                                                                                                                                        let con = false0 in
                                                                                                                                                                                                                                                        k con
                                                                                                                                                                                                                                                      | false0 ->
                                                                                                                                                                                                                                                        let con = true1 in
                                                                                                                                                                                                                                                        k con in
                                                                                                                                                                                                                                                  match prim with
                                                                                                                                                                                                                                                  | true1 ->
                                                                                                                                                                                                                                                    let prim = PRIM_LessInt(secj,0) in
                                                                                                                                                                                                                                                    let k [rev_onto,implode,explode,put_chars,disk,secj,sector] case =
                                                                                                                                                                                                                                                      match case with
                                                                                                                                                                                                                                                      | true1 ->
                                                                                                                                                                                                                                                        let loop = fix (fun [] loop acc k ->
                                                                                                                                                                                                                                                          let lam = fun [acc,loop] i k ->
                                                                                                                                                                                                                                                            let prim = PRIM_EqInt(i,0) in
                                                                                                                                                                                                                                                            match prim with
                                                                                                                                                                                                                                                            | true1 -> k acc
                                                                                                                                                                                                                                                            | false0 ->
                                                                                                                                                                                                                                                              let c = PRIM_ModInt(i,10) in
                                                                                                                                                                                                                                                              let x = PRIM_AddInt(48,c) in
                                                                                                                                                                                                                                                              let x = PRIM_CharChr(x) in
                                                                                                                                                                                                                                                              let con = Cons1[x,acc] in
                                                                                                                                                                                                                                                              let k [i] app =
                                                                                                                                                                                                                                                                let prim = PRIM_DivInt(i,10) in
                                                                                                                                                                                                                                                                app prim k in
                                                                                                                                                                                                                                                              loop con k in
                                                                                                                                                                                                                                                          k lam) in
                                                                                                                                                                                                                                                        let prim = PRIM_EqInt(secj,0) in
                                                                                                                                                                                                                                                        let k [rev_onto,implode,explode,put_chars] case =
                                                                                                                                                                                                                                                          let k [rev_onto,implode,explode,put_chars] s2 =
                                                                                                                                                                                                                                                            let lit = "write_sector " in
                                                                                                                                                                                                                                                            let k [rev_onto,implode,explode,put_chars,s2] xs =
                                                                                                                                                                                                                                                              let k [rev_onto,implode,explode,put_chars,xs] ys =
                                                                                                                                                                                                                                                                let k [rev_onto,implode,explode,put_chars,xs] app =
                                                                                                                                                                                                                                                                  let con = Nil0 in
                                                                                                                                                                                                                                                                  let k [rev_onto,implode,explode,put_chars,xs,app] app =
                                                                                                                                                                                                                                                                    let k [rev_onto,implode,explode,put_chars,app] app =
                                                                                                                                                                                                                                                                      let k [rev_onto,implode,explode,put_chars] app =
                                                                                                                                                                                                                                                                        let k [rev_onto,implode,explode,put_chars] m =
                                                                                                                                                                                                                                                                          let k [rev_onto,implode,explode,put_chars] xs =
                                                                                                                                                                                                                                                                            let lit = "\n" in
                                                                                                                                                                                                                                                                            let k [rev_onto,implode,explode,put_chars,xs] ys =
                                                                                                                                                                                                                                                                              let k [rev_onto,implode,explode,put_chars,xs] app =
                                                                                                                                                                                                                                                                                let con = Nil0 in
                                                                                                                                                                                                                                                                                let k [rev_onto,implode,explode,put_chars,xs,app] app =
                                                                                                                                                                                                                                                                                  let k [rev_onto,implode,explode,put_chars,app] app =
                                                                                                                                                                                                                                                                                    let k [rev_onto,implode,explode,put_chars] app =
                                                                                                                                                                                                                                                                                      let k [rev_onto,implode,explode,put_chars] s2 =
                                                                                                                                                                                                                                                                                        let lit = "error: " in
                                                                                                                                                                                                                                                                                        let k [rev_onto,implode,explode,put_chars,s2] xs =
                                                                                                                                                                                                                                                                                          let k [rev_onto,implode,explode,put_chars,xs] ys =
                                                                                                                                                                                                                                                                                            let k [rev_onto,implode,explode,put_chars,xs] app =
                                                                                                                                                                                                                                                                                              let con = Nil0 in
                                                                                                                                                                                                                                                                                              let k [implode,explode,put_chars,xs,app] app =
                                                                                                                                                                                                                                                                                                let k [implode,explode,put_chars,app] app =
                                                                                                                                                                                                                                                                                                  let k [implode,explode,put_chars] app =
                                                                                                                                                                                                                                                                                                    let k [explode,put_chars] s =
                                                                                                                                                                                                                                                                                                      let k [put_chars] app =
                                                                                                                                                                                                                                                                                                        let k [] _ =
                                                                                                                                                                                                                                                                                                          let con = Unit0 in
                                                                                                                                                                                                                                                                                                          let prim = PRIM_Crash(con) in
                                                                                                                                                                                                                                                                                                          k prim in
                                                                                                                                                                                                                                                                                                        put_chars app k in
                                                                                                                                                                                                                                                                                                      explode s k in
                                                                                                                                                                                                                                                                                                    implode app k in
                                                                                                                                                                                                                                                                                                  app app k in
                                                                                                                                                                                                                                                                                                app xs k in
                                                                                                                                                                                                                                                                                              rev_onto con k in
                                                                                                                                                                                                                                                                                            rev_onto ys k in
                                                                                                                                                                                                                                                                                          explode s2 k in
                                                                                                                                                                                                                                                                                        explode lit k in
                                                                                                                                                                                                                                                                                      implode app k in
                                                                                                                                                                                                                                                                                    app app k in
                                                                                                                                                                                                                                                                                  app xs k in
                                                                                                                                                                                                                                                                                rev_onto con k in
                                                                                                                                                                                                                                                                              rev_onto ys k in
                                                                                                                                                                                                                                                                            explode lit k in
                                                                                                                                                                                                                                                                          explode m k in
                                                                                                                                                                                                                                                                        implode app k in
                                                                                                                                                                                                                                                                      app app k in
                                                                                                                                                                                                                                                                    app xs k in
                                                                                                                                                                                                                                                                  rev_onto con k in
                                                                                                                                                                                                                                                                rev_onto ys k in
                                                                                                                                                                                                                                                              explode s2 k in
                                                                                                                                                                                                                                                            explode lit k in
                                                                                                                                                                                                                                                          implode case k in
                                                                                                                                                                                                                                                        match prim with
                                                                                                                                                                                                                                                        | true1 ->
                                                                                                                                                                                                                                                          let con = Nil0 in
                                                                                                                                                                                                                                                          let con = Cons1['0',con] in
                                                                                                                                                                                                                                                          k con
                                                                                                                                                                                                                                                        | false0 ->
                                                                                                                                                                                                                                                          let con = Nil0 in
                                                                                                                                                                                                                                                          let k [secj] app = app secj k in
                                                                                                                                                                                                                                                          loop con k
                                                                                                                                                                                                                                                      | false0 ->
                                                                                                                                                                                                                                                        let loop = fix (fun [] loop acc k ->
                                                                                                                                                                                                                                                          let lam = fun [acc,loop] i k ->
                                                                                                                                                                                                                                                            let prim = PRIM_EqInt(i,0) in
                                                                                                                                                                                                                                                            match prim with
                                                                                                                                                                                                                                                            | true1 -> k acc
                                                                                                                                                                                                                                                            | false0 ->
                                                                                                                                                                                                                                                              let c = PRIM_ModInt(i,10) in
                                                                                                                                                                                                                                                              let x = PRIM_AddInt(48,c) in
                                                                                                                                                                                                                                                              let x = PRIM_CharChr(x) in
                                                                                                                                                                                                                                                              let con = Cons1[x,acc] in
                                                                                                                                                                                                                                                              let k [i] app =
                                                                                                                                                                                                                                                                let prim = PRIM_DivInt(i,10) in
                                                                                                                                                                                                                                                                app prim k in
                                                                                                                                                                                                                                                              loop con k in
                                                                                                                                                                                                                                                          k lam) in
                                                                                                                                                                                                                                                        let prim = PRIM_EqInt(secj,0) in
                                                                                                                                                                                                                                                        let k [rev_onto,implode,explode,put_chars,disk,secj,sector] case =
                                                                                                                                                                                                                                                          let k [rev_onto,implode,explode,put_chars,disk,secj,sector] s1 =
                                                                                                                                                                                                                                                            let k [rev_onto,implode,explode,put_chars,disk,secj,sector] xs =
                                                                                                                                                                                                                                                              let lit = "   **SLOW**" in
                                                                                                                                                                                                                                                              let k [rev_onto,implode,explode,put_chars,disk,secj,sector,xs] ys =
                                                                                                                                                                                                                                                                let k [rev_onto,implode,explode,put_chars,disk,secj,sector,xs] app =
                                                                                                                                                                                                                                                                  let con = Nil0 in
                                                                                                                                                                                                                                                                  let k [rev_onto,implode,explode,put_chars,disk,secj,sector,xs,app] app =
                                                                                                                                                                                                                                                                    let k [rev_onto,implode,explode,put_chars,disk,secj,sector,app] app =
                                                                                                                                                                                                                                                                      let k [rev_onto,implode,explode,put_chars,disk,secj,sector] app =
                                                                                                                                                                                                                                                                        let k [rev_onto,implode,explode,put_chars,disk,secj,sector] s2 =
                                                                                                                                                                                                                                                                          let lit = "write_sector " in
                                                                                                                                                                                                                                                                          let k [rev_onto,implode,explode,put_chars,disk,secj,sector,s2] xs =
                                                                                                                                                                                                                                                                            let k [rev_onto,implode,explode,put_chars,disk,secj,sector,xs] ys =
                                                                                                                                                                                                                                                                              let k [rev_onto,implode,explode,put_chars,disk,secj,sector,xs] app =
                                                                                                                                                                                                                                                                                let con = Nil0 in
                                                                                                                                                                                                                                                                                let k [rev_onto,implode,explode,put_chars,disk,secj,sector,xs,app] app =
                                                                                                                                                                                                                                                                                  let k [rev_onto,implode,explode,put_chars,disk,secj,sector,app] app =
                                                                                                                                                                                                                                                                                    let k [rev_onto,implode,explode,put_chars,disk,secj,sector] app =
                                                                                                                                                                                                                                                                                      let k [rev_onto,implode,explode,put_chars,disk,secj,sector] m =
                                                                                                                                                                                                                                                                                        let k [rev_onto,implode,explode,put_chars,disk,secj,sector] xs =
                                                                                                                                                                                                                                                                                          let lit = "\n" in
                                                                                                                                                                                                                                                                                          let k [rev_onto,implode,explode,put_chars,disk,secj,sector,xs] ys =
                                                                                                                                                                                                                                                                                            let k [rev_onto,implode,explode,put_chars,disk,secj,sector,xs] app =
                                                                                                                                                                                                                                                                                              let con = Nil0 in
                                                                                                                                                                                                                                                                                              let k [rev_onto,implode,explode,put_chars,disk,secj,sector,xs,app] app =
                                                                                                                                                                                                                                                                                                let k [rev_onto,implode,explode,put_chars,disk,secj,sector,app] app =
                                                                                                                                                                                                                                                                                                  let k [rev_onto,implode,explode,put_chars,disk,secj,sector] app =
                                                                                                                                                                                                                                                                                                    let k [rev_onto,implode,explode,put_chars,disk,secj,sector] s2 =
                                                                                                                                                                                                                                                                                                      let lit = "trace: " in
                                                                                                                                                                                                                                                                                                      let k [rev_onto,implode,explode,put_chars,disk,secj,sector,s2] xs =
                                                                                                                                                                                                                                                                                                        let k [rev_onto,implode,explode,put_chars,disk,secj,sector,xs] ys =
                                                                                                                                                                                                                                                                                                          let k [rev_onto,implode,explode,put_chars,disk,secj,sector,xs] app =
                                                                                                                                                                                                                                                                                                            let con = Nil0 in
                                                                                                                                                                                                                                                                                                            let k [implode,explode,put_chars,disk,secj,sector,xs,app] app =
                                                                                                                                                                                                                                                                                                              let k [implode,explode,put_chars,disk,secj,sector,app] app =
                                                                                                                                                                                                                                                                                                                let k [implode,explode,put_chars,disk,secj,sector] app =
                                                                                                                                                                                                                                                                                                                  let k [explode,put_chars,disk,secj,sector] s =
                                                                                                                                                                                                                                                                                                                    let k [put_chars,disk,secj,sector] app =
                                                                                                                                                                                                                                                                                                                      let k [disk,secj,sector] _ =
                                                                                                                                                                                                                                                                                                                        let k [secj,sector] target =
                                                                                                                                                                                                                                                                                                                          let offset = PRIM_MulInt(secj,512) in
                                                                                                                                                                                                                                                                                                                          let k [target,offset] source =
                                                                                                                                                                                                                                                                                                                            let loop = fix (fun [target,offset,source] loop i k ->
                                                                                                                                                                                                                                                                                                                              let b = PRIM_LessInt(i,512) in
                                                                                                                                                                                                                                                                                                                              let k [target,offset,source,i,loop] case =
                                                                                                                                                                                                                                                                                                                                match case with
                                                                                                                                                                                                                                                                                                                                | true1 ->
                                                                                                                                                                                                                                                                                                                                  let con = Unit0 in
                                                                                                                                                                                                                                                                                                                                  k con
                                                                                                                                                                                                                                                                                                                                | false0 ->
                                                                                                                                                                                                                                                                                                                                  let char = PRIM_GetBytes(source,i) in
                                                                                                                                                                                                                                                                                                                                  let y = PRIM_AddInt(offset,i) in
                                                                                                                                                                                                                                                                                                                                  let _ = PRIM_SetBytes(target,y,char) in
                                                                                                                                                                                                                                                                                                                                  let prim = PRIM_AddInt(i,1) in
                                                                                                                                                                                                                                                                                                                                  loop prim k in
                                                                                                                                                                                                                                                                                                                              match b with
                                                                                                                                                                                                                                                                                                                              | true1 ->
                                                                                                                                                                                                                                                                                                                                let con = false0 in
                                                                                                                                                                                                                                                                                                                                k con
                                                                                                                                                                                                                                                                                                                              | false0 ->
                                                                                                                                                                                                                                                                                                                                let con = true1 in
                                                                                                                                                                                                                                                                                                                                k con) in
                                                                                                                                                                                                                                                                                                                            loop 0 k in
                                                                                                                                                                                                                                                                                                                          match sector with
                                                                                                                                                                                                                                                                                                                          | Sector0(x) -> k x in
                                                                                                                                                                                                                                                                                                                        match disk with
                                                                                                                                                                                                                                                                                                                        | Disk0(x) -> k x in
                                                                                                                                                                                                                                                                                                                      put_chars app k in
                                                                                                                                                                                                                                                                                                                    explode s k in
                                                                                                                                                                                                                                                                                                                  implode app k in
                                                                                                                                                                                                                                                                                                                app app k in
                                                                                                                                                                                                                                                                                                              app xs k in
                                                                                                                                                                                                                                                                                                            rev_onto con k in
                                                                                                                                                                                                                                                                                                          rev_onto ys k in
                                                                                                                                                                                                                                                                                                        explode s2 k in
                                                                                                                                                                                                                                                                                                      explode lit k in
                                                                                                                                                                                                                                                                                                    implode app k in
                                                                                                                                                                                                                                                                                                  app app k in
                                                                                                                                                                                                                                                                                                app xs k in
                                                                                                                                                                                                                                                                                              rev_onto con k in
                                                                                                                                                                                                                                                                                            rev_onto ys k in
                                                                                                                                                                                                                                                                                          explode lit k in
                                                                                                                                                                                                                                                                                        explode m k in
                                                                                                                                                                                                                                                                                      implode app k in
                                                                                                                                                                                                                                                                                    app app k in
                                                                                                                                                                                                                                                                                  app xs k in
                                                                                                                                                                                                                                                                                rev_onto con k in
                                                                                                                                                                                                                                                                              rev_onto ys k in
                                                                                                                                                                                                                                                                            explode s2 k in
                                                                                                                                                                                                                                                                          explode lit k in
                                                                                                                                                                                                                                                                        implode app k in
                                                                                                                                                                                                                                                                      app app k in
                                                                                                                                                                                                                                                                    app xs k in
                                                                                                                                                                                                                                                                  rev_onto con k in
                                                                                                                                                                                                                                                                rev_onto ys k in
                                                                                                                                                                                                                                                              explode lit k in
                                                                                                                                                                                                                                                            explode s1 k in
                                                                                                                                                                                                                                                          implode case k in
                                                                                                                                                                                                                                                        match prim with
                                                                                                                                                                                                                                                        | true1 ->
                                                                                                                                                                                                                                                          let con = Nil0 in
                                                                                                                                                                                                                                                          let con = Cons1['0',con] in
                                                                                                                                                                                                                                                          k con
                                                                                                                                                                                                                                                        | false0 ->
                                                                                                                                                                                                                                                          let con = Nil0 in
                                                                                                                                                                                                                                                          let k [secj] app = app secj k in
                                                                                                                                                                                                                                                          loop con k in
                                                                                                                                                                                                                                                    match prim with
                                                                                                                                                                                                                                                    | true1 ->
                                                                                                                                                                                                                                                      let con = true1 in
                                                                                                                                                                                                                                                      k con
                                                                                                                                                                                                                                                    | false0 ->
                                                                                                                                                                                                                                                      let b = PRIM_LessInt(secj,32) in
                                                                                                                                                                                                                                                      match b with
                                                                                                                                                                                                                                                      | true1 ->
                                                                                                                                                                                                                                                        let con = false0 in
                                                                                                                                                                                                                                                        k con
                                                                                                                                                                                                                                                      | false0 ->
                                                                                                                                                                                                                                                        let con = true1 in
                                                                                                                                                                                                                                                        k con
                                                                                                                                                                                                                                                  | false0 ->
                                                                                                                                                                                                                                                    let con = Unit0 in
                                                                                                                                                                                                                                                    k con in
                                                                                                                                                                                                                                          implode app k in
                                                                                                                                                                                                                                        app app k in
                                                                                                                                                                                                                                      app xs k in
                                                                                                                                                                                                                                    rev_onto con k in
                                                                                                                                                                                                                                  rev_onto ys k in
                                                                                                                                                                                                                                explode s2 k in
                                                                                                                                                                                                                              explode lit k in
                                                                                                                                                                                                                            implode app k in
                                                                                                                                                                                                                          app app k in
                                                                                                                                                                                                                        app xs k in
                                                                                                                                                                                                                      rev_onto con k in
                                                                                                                                                                                                                    rev_onto ys k in
                                                                                                                                                                                                                  explode s2 k in
                                                                                                                                                                                                                explode s1 k in
                                                                                                                                                                                                              implode app k in
                                                                                                                                                                                                            app app k in
                                                                                                                                                                                                          app xs k in
                                                                                                                                                                                                        rev_onto con k in
                                                                                                                                                                                                      rev_onto ys k in
                                                                                                                                                                                                    explode s2 k in
                                                                                                                                                                                                  explode lit k in
                                                                                                                                                                                                implode app k in
                                                                                                                                                                                              app app k in
                                                                                                                                                                                            app xs k in
                                                                                                                                                                                          rev_onto con k in
                                                                                                                                                                                        rev_onto ys k in
                                                                                                                                                                                      explode s2 k in
                                                                                                                                                                                    explode s1 k in
                                                                                                                                                                                  implode app k in
                                                                                                                                                                                app app k in
                                                                                                                                                                              app xs k in
                                                                                                                                                                            rev_onto con k in
                                                                                                                                                                          rev_onto ys k in
                                                                                                                                                                        explode s2 k in
                                                                                                                                                                      explode lit k in
                                                                                                                                                                    implode app k in
                                                                                                                                                                  app 64 k in
                                                                                                                                                                loop con k in
                                                                                                                                                              implode case k in
                                                                                                                                                            match prim with
                                                                                                                                                            | true1 ->
                                                                                                                                                              let con = Nil0 in
                                                                                                                                                              let con = Cons1['0',con] in
                                                                                                                                                              k con
                                                                                                                                                            | false0 ->
                                                                                                                                                              let con = Nil0 in
                                                                                                                                                              let k [offset] app = app offset k in
                                                                                                                                                              loop con k in
                                                                                                                                                          implode case k in
                                                                                                                                                        match prim with
                                                                                                                                                        | true1 ->
                                                                                                                                                          let con = Nil0 in
                                                                                                                                                          let con = Cons1['0',con] in
                                                                                                                                                          k con
                                                                                                                                                        | false0 ->
                                                                                                                                                          let con = Nil0 in
                                                                                                                                                          let k [seci] app = app seci k in
                                                                                                                                                          loop con k in
                                                                                                                                                      match block with
                                                                                                                                                      | Block0(x) -> k x in
                                                                                                                                                    implode app k in
                                                                                                                                                  app app k in
                                                                                                                                                app xs k in
                                                                                                                                              rev_onto con k in
                                                                                                                                            rev_onto ys k in
                                                                                                                                          explode s2 k in
                                                                                                                                        explode lit k in
                                                                                                                                      implode app k in
                                                                                                                                    app app k in
                                                                                                                                  app xs k in
                                                                                                                                rev_onto con k in
                                                                                                                              rev_onto ys k in
                                                                                                                            explode s2 k in
                                                                                                                          explode s1 k in
                                                                                                                        implode app k in
                                                                                                                      app app k in
                                                                                                                    app xs k in
                                                                                                                  rev_onto con k in
                                                                                                                rev_onto ys k in
                                                                                                              explode s2 k in
                                                                                                            explode lit k in
                                                                                                          implode app k in
                                                                                                        app app k in
                                                                                                      app xs k in
                                                                                                    rev_onto con k in
                                                                                                  rev_onto ys k in
                                                                                                explode lit k in
                                                                                              explode s1 k in
                                                                                            implode case k in
                                                                                          match prim with
                                                                                          | true1 ->
                                                                                            let con = Nil0 in
                                                                                            let con = Cons1['0',con] in
                                                                                            k con
                                                                                          | false0 ->
                                                                                            let con = Nil0 in
                                                                                            let k [seci] app = app seci k in
                                                                                            loop con k in
                                                                                        implode case k in
                                                                                      match prim with
                                                                                      | true1 ->
                                                                                        let con = Nil0 in
                                                                                        let con = Cons1['0',con] in
                                                                                        k con
                                                                                      | false0 ->
                                                                                        let con = Nil0 in
                                                                                        let k [i] app = app i k in
                                                                                        loop con k in
                                                                                  match prim with
                                                                                  | true1 ->
                                                                                    let con = true1 in
                                                                                    k con
                                                                                  | false0 ->
                                                                                    let b = PRIM_LessInt(i,256) in
                                                                                    match b with
                                                                                    | true1 ->
                                                                                      let con = false0 in
                                                                                      k con
                                                                                    | false0 ->
                                                                                      let con = true1 in
                                                                                      k con in
                                                                                implode app k in
                                                                              app 64 k in
                                                                            loop con k) in
                                                                        let k [rev_onto,implode,explode,put_chars,disk] _ =
                                                                          let loop = fix (fun [rev_onto,implode,explode,put_chars,disk] loop i k ->
                                                                            let prim = PRIM_LessInt(125,i) in
                                                                            match prim with
                                                                            | true1 ->
                                                                              let con = Unit0 in
                                                                              k con
                                                                            | false0 ->
                                                                              let prim = PRIM_LessInt(i,0) in
                                                                              let k [rev_onto,implode,explode,put_chars,disk,i,loop] case =
                                                                                let k [rev_onto,implode,explode,put_chars,i,loop] thing =
                                                                                  let k [rev_onto,implode,explode,put_chars,i,loop] x =
                                                                                    let block_string = PRIM_FreezeBytes(x) in
                                                                                    let loop = fix (fun [] loop acc k ->
                                                                                      let lam = fun [acc,loop] i k ->
                                                                                        let prim = PRIM_EqInt(i,0) in
                                                                                        match prim with
                                                                                        | true1 -> k acc
                                                                                        | false0 ->
                                                                                          let c = PRIM_ModInt(i,10) in
                                                                                          let x = PRIM_AddInt(48,c) in
                                                                                          let x = PRIM_CharChr(x) in
                                                                                          let con = Cons1[x,acc] in
                                                                                          let k [i] app =
                                                                                            let prim = PRIM_DivInt(i,10) in
                                                                                            app prim k in
                                                                                          loop con k in
                                                                                      k lam) in
                                                                                    let prim = PRIM_EqInt(i,0) in
                                                                                    let k [rev_onto,implode,explode,put_chars,i,loop,block_string] case =
                                                                                      let k [rev_onto,implode,explode,put_chars,i,loop,block_string] s1 =
                                                                                        let lit = " : " in
                                                                                        let k [rev_onto,implode,explode,put_chars,i,loop,block_string,s1] xs =
                                                                                          let k [rev_onto,implode,explode,put_chars,i,loop,s1,xs] ys =
                                                                                            let k [rev_onto,implode,explode,put_chars,i,loop,s1,xs] app =
                                                                                              let con = Nil0 in
                                                                                              let k [rev_onto,implode,explode,put_chars,i,loop,s1,xs,app] app =
                                                                                                let k [rev_onto,implode,explode,put_chars,i,loop,s1,app] app =
                                                                                                  let k [rev_onto,implode,explode,put_chars,i,loop,s1] app =
                                                                                                    let k [rev_onto,implode,explode,put_chars,i,loop,s1] s2 =
                                                                                                      let k [rev_onto,implode,explode,put_chars,i,loop,s2] xs =
                                                                                                        let k [rev_onto,implode,explode,put_chars,i,loop,xs] ys =
                                                                                                          let k [rev_onto,implode,explode,put_chars,i,loop,xs] app =
                                                                                                            let con = Nil0 in
                                                                                                            let k [implode,explode,put_chars,i,loop,xs,app] app =
                                                                                                              let k [implode,explode,put_chars,i,loop,app] app =
                                                                                                                let k [implode,explode,put_chars,i,loop] app =
                                                                                                                  let k [explode,put_chars,i,loop] s =
                                                                                                                    let k [put_chars,i,loop] app =
                                                                                                                      let k [i,loop] _ =
                                                                                                                        let _ = PRIM_PutChar('\n') in
                                                                                                                        let prim = PRIM_AddInt(i,1) in
                                                                                                                        loop prim k in
                                                                                                                      put_chars app k in
                                                                                                                    explode s k in
                                                                                                                  implode app k in
                                                                                                                app app k in
                                                                                                              app xs k in
                                                                                                            rev_onto con k in
                                                                                                          rev_onto ys k in
                                                                                                        explode s2 k in
                                                                                                      explode s1 k in
                                                                                                    implode app k in
                                                                                                  app app k in
                                                                                                app xs k in
                                                                                              rev_onto con k in
                                                                                            rev_onto ys k in
                                                                                          explode block_string k in
                                                                                        explode lit k in
                                                                                      implode case k in
                                                                                    match prim with
                                                                                    | true1 ->
                                                                                      let con = Nil0 in
                                                                                      let con = Cons1['0',con] in
                                                                                      k con
                                                                                    | false0 ->
                                                                                      let con = Nil0 in
                                                                                      let k [i] app = app i k in
                                                                                      loop con k in
                                                                                  match thing with
                                                                                  | Block0(x) -> k x in
                                                                                match case with
                                                                                | true1 ->
                                                                                  let loop = fix (fun [] loop acc k ->
                                                                                    let lam = fun [acc,loop] i k ->
                                                                                      let prim = PRIM_EqInt(i,0) in
                                                                                      match prim with
                                                                                      | true1 -> k acc
                                                                                      | false0 ->
                                                                                        let c = PRIM_ModInt(i,10) in
                                                                                        let x = PRIM_AddInt(48,c) in
                                                                                        let x = PRIM_CharChr(x) in
                                                                                        let con = Cons1[x,acc] in
                                                                                        let k [i] app =
                                                                                          let prim = PRIM_DivInt(i,10) in
                                                                                          app prim k in
                                                                                        loop con k in
                                                                                    k lam) in
                                                                                  let prim = PRIM_EqInt(i,0) in
                                                                                  let k [rev_onto,implode,explode,put_chars] case =
                                                                                    let k [rev_onto,implode,explode,put_chars] s2 =
                                                                                      let lit = "read_block " in
                                                                                      let k [rev_onto,implode,explode,put_chars,s2] xs =
                                                                                        let k [rev_onto,implode,explode,put_chars,xs] ys =
                                                                                          let k [rev_onto,implode,explode,put_chars,xs] app =
                                                                                            let con = Nil0 in
                                                                                            let k [rev_onto,implode,explode,put_chars,xs,app] app =
                                                                                              let k [rev_onto,implode,explode,put_chars,app] app =
                                                                                                let k [rev_onto,implode,explode,put_chars] app =
                                                                                                  let k [rev_onto,implode,explode,put_chars] m =
                                                                                                    let k [rev_onto,implode,explode,put_chars] xs =
                                                                                                      let lit = "\n" in
                                                                                                      let k [rev_onto,implode,explode,put_chars,xs] ys =
                                                                                                        let k [rev_onto,implode,explode,put_chars,xs] app =
                                                                                                          let con = Nil0 in
                                                                                                          let k [rev_onto,implode,explode,put_chars,xs,app] app =
                                                                                                            let k [rev_onto,implode,explode,put_chars,app] app =
                                                                                                              let k [rev_onto,implode,explode,put_chars] app =
                                                                                                                let k [rev_onto,implode,explode,put_chars] s2 =
                                                                                                                  let lit = "error: " in
                                                                                                                  let k [rev_onto,implode,explode,put_chars,s2] xs =
                                                                                                                    let k [rev_onto,implode,explode,put_chars,xs] ys =
                                                                                                                      let k [rev_onto,implode,explode,put_chars,xs] app =
                                                                                                                        let con = Nil0 in
                                                                                                                        let k [implode,explode,put_chars,xs,app] app =
                                                                                                                          let k [implode,explode,put_chars,app] app =
                                                                                                                            let k [implode,explode,put_chars] app =
                                                                                                                              let k [explode,put_chars] s =
                                                                                                                                let k [put_chars] app =
                                                                                                                                  let k [] _ =
                                                                                                                                    let con = Unit0 in
                                                                                                                                    let prim = PRIM_Crash(con) in
                                                                                                                                    k prim in
                                                                                                                                  put_chars app k in
                                                                                                                                explode s k in
                                                                                                                              implode app k in
                                                                                                                            app app k in
                                                                                                                          app xs k in
                                                                                                                        rev_onto con k in
                                                                                                                      rev_onto ys k in
                                                                                                                    explode s2 k in
                                                                                                                  explode lit k in
                                                                                                                implode app k in
                                                                                                              app app k in
                                                                                                            app xs k in
                                                                                                          rev_onto con k in
                                                                                                        rev_onto ys k in
                                                                                                      explode lit k in
                                                                                                    explode m k in
                                                                                                  implode app k in
                                                                                                app app k in
                                                                                              app xs k in
                                                                                            rev_onto con k in
                                                                                          rev_onto ys k in
                                                                                        explode s2 k in
                                                                                      explode lit k in
                                                                                    implode case k in
                                                                                  match prim with
                                                                                  | true1 ->
                                                                                    let con = Nil0 in
                                                                                    let con = Cons1['0',con] in
                                                                                    k con
                                                                                  | false0 ->
                                                                                    let con = Nil0 in
                                                                                    let k [i] app = app i k in
                                                                                    loop con k
                                                                                | false0 ->
                                                                                  let seci = PRIM_DivInt(i,8) in
                                                                                  let loop = fix (fun [] loop acc k ->
                                                                                    let lam = fun [acc,loop] i k ->
                                                                                      let prim = PRIM_EqInt(i,0) in
                                                                                      match prim with
                                                                                      | true1 -> k acc
                                                                                      | false0 ->
                                                                                        let c = PRIM_ModInt(i,10) in
                                                                                        let x = PRIM_AddInt(48,c) in
                                                                                        let x = PRIM_CharChr(x) in
                                                                                        let con = Cons1[x,acc] in
                                                                                        let k [i] app =
                                                                                          let prim = PRIM_DivInt(i,10) in
                                                                                          app prim k in
                                                                                        loop con k in
                                                                                    k lam) in
                                                                                  let prim = PRIM_EqInt(i,0) in
                                                                                  let k [rev_onto,implode,explode,put_chars,disk,i,seci] case =
                                                                                    let k [rev_onto,implode,explode,put_chars,disk,i,seci] s1 =
                                                                                      let loop = fix (fun [] loop acc k ->
                                                                                        let lam = fun [acc,loop] i k ->
                                                                                          let prim = PRIM_EqInt(i,0) in
                                                                                          match prim with
                                                                                          | true1 -> k acc
                                                                                          | false0 ->
                                                                                            let c = PRIM_ModInt(i,10) in
                                                                                            let x = PRIM_AddInt(48,c) in
                                                                                            let x = PRIM_CharChr(x) in
                                                                                            let con = Cons1[x,acc] in
                                                                                            let k [i] app =
                                                                                              let prim = PRIM_DivInt(i,10) in
                                                                                              app prim k in
                                                                                            loop con k in
                                                                                        k lam) in
                                                                                      let prim = PRIM_EqInt(seci,0) in
                                                                                      let k [rev_onto,implode,explode,put_chars,disk,i,s1] case =
                                                                                        let k [rev_onto,implode,explode,put_chars,disk,i,s1] s1 =
                                                                                          let k [rev_onto,implode,explode,put_chars,disk,i,s1] xs =
                                                                                            let lit = "]" in
                                                                                            let k [rev_onto,implode,explode,put_chars,disk,i,s1,xs] ys =
                                                                                              let k [rev_onto,implode,explode,put_chars,disk,i,s1,xs] app =
                                                                                                let con = Nil0 in
                                                                                                let k [rev_onto,implode,explode,put_chars,disk,i,s1,xs,app] app =
                                                                                                  let k [rev_onto,implode,explode,put_chars,disk,i,s1,app] app =
                                                                                                    let k [rev_onto,implode,explode,put_chars,disk,i,s1] app =
                                                                                                      let k [rev_onto,implode,explode,put_chars,disk,i,s1] s2 =
                                                                                                        let lit = "[" in
                                                                                                        let k [rev_onto,implode,explode,put_chars,disk,i,s1,s2] xs =
                                                                                                          let k [rev_onto,implode,explode,put_chars,disk,i,s1,xs] ys =
                                                                                                            let k [rev_onto,implode,explode,put_chars,disk,i,s1,xs] app =
                                                                                                              let con = Nil0 in
                                                                                                              let k [rev_onto,implode,explode,put_chars,disk,i,s1,xs,app] app =
                                                                                                                let k [rev_onto,implode,explode,put_chars,disk,i,s1,app] app =
                                                                                                                  let k [rev_onto,implode,explode,put_chars,disk,i,s1] app =
                                                                                                                    let k [rev_onto,implode,explode,put_chars,disk,i,s1] s2 =
                                                                                                                      let k [rev_onto,implode,explode,put_chars,disk,i,s2] xs =
                                                                                                                        let k [rev_onto,implode,explode,put_chars,disk,i,xs] ys =
                                                                                                                          let k [rev_onto,implode,explode,put_chars,disk,i,xs] app =
                                                                                                                            let con = Nil0 in
                                                                                                                            let k [rev_onto,implode,explode,put_chars,disk,i,xs,app] app =
                                                                                                                              let k [rev_onto,implode,explode,put_chars,disk,i,app] app =
                                                                                                                                let k [rev_onto,implode,explode,put_chars,disk,i] app =
                                                                                                                                  let k [rev_onto,implode,explode,put_chars,disk,i] s2 =
                                                                                                                                    let lit = "read_block " in
                                                                                                                                    let k [rev_onto,implode,explode,put_chars,disk,i,s2] xs =
                                                                                                                                      let k [rev_onto,implode,explode,put_chars,disk,i,xs] ys =
                                                                                                                                        let k [rev_onto,implode,explode,put_chars,disk,i,xs] app =
                                                                                                                                          let con = Nil0 in
                                                                                                                                          let k [rev_onto,implode,explode,put_chars,disk,i,xs,app] app =
                                                                                                                                            let k [rev_onto,implode,explode,put_chars,disk,i,app] app =
                                                                                                                                              let k [rev_onto,implode,explode,put_chars,disk,i] app =
                                                                                                                                                let k [rev_onto,implode,explode,put_chars,disk,i] m =
                                                                                                                                                  let seci = PRIM_DivInt(i,8) in
                                                                                                                                                  let loop = fix (fun [] loop acc k ->
                                                                                                                                                    let lam = fun [acc,loop] i k ->
                                                                                                                                                      let prim = PRIM_EqInt(i,0) in
                                                                                                                                                      match prim with
                                                                                                                                                      | true1 -> k acc
                                                                                                                                                      | false0 ->
                                                                                                                                                        let c = PRIM_ModInt(i,10) in
                                                                                                                                                        let x = PRIM_AddInt(48,c) in
                                                                                                                                                        let x = PRIM_CharChr(x) in
                                                                                                                                                        let con = Cons1[x,acc] in
                                                                                                                                                        let k [i] app =
                                                                                                                                                          let prim = PRIM_DivInt(i,10) in
                                                                                                                                                          app prim k in
                                                                                                                                                        loop con k in
                                                                                                                                                    k lam) in
                                                                                                                                                  let prim = PRIM_EqInt(seci,0) in
                                                                                                                                                  let k [rev_onto,implode,explode,put_chars,disk,i,seci] case =
                                                                                                                                                    let k [rev_onto,implode,explode,put_chars,disk,i,seci] s2 =
                                                                                                                                                      let lit = "read_sectorC1 seci=" in
                                                                                                                                                      let k [rev_onto,implode,explode,put_chars,disk,i,seci,s2] xs =
                                                                                                                                                        let k [rev_onto,implode,explode,put_chars,disk,i,seci,xs] ys =
                                                                                                                                                          let k [rev_onto,implode,explode,put_chars,disk,i,seci,xs] app =
                                                                                                                                                            let con = Nil0 in
                                                                                                                                                            let k [rev_onto,implode,explode,put_chars,disk,i,seci,xs,app] app =
                                                                                                                                                              let k [rev_onto,implode,explode,put_chars,disk,i,seci,app] app =
                                                                                                                                                                let k [rev_onto,implode,explode,put_chars,disk,i,seci] app =
                                                                                                                                                                  let k [rev_onto,implode,explode,put_chars,disk,i,seci] m =
                                                                                                                                                                    let k [i] sector =
                                                                                                                                                                      let y = PRIM_ModInt(i,8) in
                                                                                                                                                                      let offset = PRIM_MulInt(64,y) in
                                                                                                                                                                      let k [offset] source =
                                                                                                                                                                        let target = PRIM_MakeBytes(64) in
                                                                                                                                                                        let loop = fix (fun [offset,source,target] loop i k ->
                                                                                                                                                                          let b = PRIM_LessInt(i,64) in
                                                                                                                                                                          let k [offset,source,target,i,loop] case =
                                                                                                                                                                            match case with
                                                                                                                                                                            | true1 ->
                                                                                                                                                                              let con = Unit0 in
                                                                                                                                                                              k con
                                                                                                                                                                            | false0 ->
                                                                                                                                                                              let y = PRIM_AddInt(offset,i) in
                                                                                                                                                                              let char = PRIM_GetBytes(source,y) in
                                                                                                                                                                              let _ = PRIM_SetBytes(target,i,char) in
                                                                                                                                                                              let prim = PRIM_AddInt(i,1) in
                                                                                                                                                                              loop prim k in
                                                                                                                                                                          match b with
                                                                                                                                                                          | true1 ->
                                                                                                                                                                            let con = false0 in
                                                                                                                                                                            k con
                                                                                                                                                                          | false0 ->
                                                                                                                                                                            let con = true1 in
                                                                                                                                                                            k con) in
                                                                                                                                                                        let k [target] _ =
                                                                                                                                                                          let con = Block0[target] in
                                                                                                                                                                          k con in
                                                                                                                                                                        loop 0 k in
                                                                                                                                                                      match sector with
                                                                                                                                                                      | Sector0(x) -> k x in
                                                                                                                                                                    match disk with
                                                                                                                                                                    | DiskC10(disk,r) ->
                                                                                                                                                                      let cache_line = PRIM_DeRef(r) in
                                                                                                                                                                      match cache_line with
                                                                                                                                                                      | Cache_Line0(dirty,secj,sector) ->
                                                                                                                                                                        let prim = PRIM_EqInt(seci,secj) in
                                                                                                                                                                        match prim with
                                                                                                                                                                        | true1 -> k sector
                                                                                                                                                                        | false0 ->
                                                                                                                                                                          let prim = PRIM_DeRef(dirty) in
                                                                                                                                                                          let k [rev_onto,implode,explode,put_chars,seci,disk,r] _ =
                                                                                                                                                                            let prim = PRIM_LessInt(seci,0) in
                                                                                                                                                                            let k [rev_onto,implode,explode,put_chars,seci,disk,r] case =
                                                                                                                                                                              let k [seci,r] sector =
                                                                                                                                                                                let con = false0 in
                                                                                                                                                                                let prim = PRIM_MakeRef(con) in
                                                                                                                                                                                let cache_line = Cache_Line0[prim,seci,sector] in
                                                                                                                                                                                let _ = PRIM_SetRef(r,cache_line) in
                                                                                                                                                                                k sector in
                                                                                                                                                                              match case with
                                                                                                                                                                              | true1 ->
                                                                                                                                                                                let loop = fix (fun [] loop acc k ->
                                                                                                                                                                                  let lam = fun [acc,loop] i k ->
                                                                                                                                                                                    let prim = PRIM_EqInt(i,0) in
                                                                                                                                                                                    match prim with
                                                                                                                                                                                    | true1 -> k acc
                                                                                                                                                                                    | false0 ->
                                                                                                                                                                                      let c = PRIM_ModInt(i,10) in
                                                                                                                                                                                      let x = PRIM_AddInt(48,c) in
                                                                                                                                                                                      let x = PRIM_CharChr(x) in
                                                                                                                                                                                      let con = Cons1[x,acc] in
                                                                                                                                                                                      let k [i] app =
                                                                                                                                                                                        let prim = PRIM_DivInt(i,10) in
                                                                                                                                                                                        app prim k in
                                                                                                                                                                                      loop con k in
                                                                                                                                                                                  k lam) in
                                                                                                                                                                                let prim = PRIM_EqInt(seci,0) in
                                                                                                                                                                                let k [rev_onto,implode,explode,put_chars] case =
                                                                                                                                                                                  let k [rev_onto,implode,explode,put_chars] s2 =
                                                                                                                                                                                    let lit = "read_sector " in
                                                                                                                                                                                    let k [rev_onto,implode,explode,put_chars,s2] xs =
                                                                                                                                                                                      let k [rev_onto,implode,explode,put_chars,xs] ys =
                                                                                                                                                                                        let k [rev_onto,implode,explode,put_chars,xs] app =
                                                                                                                                                                                          let con = Nil0 in
                                                                                                                                                                                          let k [rev_onto,implode,explode,put_chars,xs,app] app =
                                                                                                                                                                                            let k [rev_onto,implode,explode,put_chars,app] app =
                                                                                                                                                                                              let k [rev_onto,implode,explode,put_chars] app =
                                                                                                                                                                                                let k [rev_onto,implode,explode,put_chars] m =
                                                                                                                                                                                                  let k [rev_onto,implode,explode,put_chars] xs =
                                                                                                                                                                                                    let lit = "\n" in
                                                                                                                                                                                                    let k [rev_onto,implode,explode,put_chars,xs] ys =
                                                                                                                                                                                                      let k [rev_onto,implode,explode,put_chars,xs] app =
                                                                                                                                                                                                        let con = Nil0 in
                                                                                                                                                                                                        let k [rev_onto,implode,explode,put_chars,xs,app] app =
                                                                                                                                                                                                          let k [rev_onto,implode,explode,put_chars,app] app =
                                                                                                                                                                                                            let k [rev_onto,implode,explode,put_chars] app =
                                                                                                                                                                                                              let k [rev_onto,implode,explode,put_chars] s2 =
                                                                                                                                                                                                                let lit = "error: " in
                                                                                                                                                                                                                let k [rev_onto,implode,explode,put_chars,s2] xs =
                                                                                                                                                                                                                  let k [rev_onto,implode,explode,put_chars,xs] ys =
                                                                                                                                                                                                                    let k [rev_onto,implode,explode,put_chars,xs] app =
                                                                                                                                                                                                                      let con = Nil0 in
                                                                                                                                                                                                                      let k [implode,explode,put_chars,xs,app] app =
                                                                                                                                                                                                                        let k [implode,explode,put_chars,app] app =
                                                                                                                                                                                                                          let k [implode,explode,put_chars] app =
                                                                                                                                                                                                                            let k [explode,put_chars] s =
                                                                                                                                                                                                                              let k [put_chars] app =
                                                                                                                                                                                                                                let k [] _ =
                                                                                                                                                                                                                                  let con = Unit0 in
                                                                                                                                                                                                                                  let prim = PRIM_Crash(con) in
                                                                                                                                                                                                                                  k prim in
                                                                                                                                                                                                                                put_chars app k in
                                                                                                                                                                                                                              explode s k in
                                                                                                                                                                                                                            implode app k in
                                                                                                                                                                                                                          app app k in
                                                                                                                                                                                                                        app xs k in
                                                                                                                                                                                                                      rev_onto con k in
                                                                                                                                                                                                                    rev_onto ys k in
                                                                                                                                                                                                                  explode s2 k in
                                                                                                                                                                                                                explode lit k in
                                                                                                                                                                                                              implode app k in
                                                                                                                                                                                                            app app k in
                                                                                                                                                                                                          app xs k in
                                                                                                                                                                                                        rev_onto con k in
                                                                                                                                                                                                      rev_onto ys k in
                                                                                                                                                                                                    explode lit k in
                                                                                                                                                                                                  explode m k in
                                                                                                                                                                                                implode app k in
                                                                                                                                                                                              app app k in
                                                                                                                                                                                            app xs k in
                                                                                                                                                                                          rev_onto con k in
                                                                                                                                                                                        rev_onto ys k in
                                                                                                                                                                                      explode s2 k in
                                                                                                                                                                                    explode lit k in
                                                                                                                                                                                  implode case k in
                                                                                                                                                                                match prim with
                                                                                                                                                                                | true1 ->
                                                                                                                                                                                  let con = Nil0 in
                                                                                                                                                                                  let con = Cons1['0',con] in
                                                                                                                                                                                  k con
                                                                                                                                                                                | false0 ->
                                                                                                                                                                                  let con = Nil0 in
                                                                                                                                                                                  let k [seci] app = app seci k in
                                                                                                                                                                                  loop con k
                                                                                                                                                                              | false0 ->
                                                                                                                                                                                let loop = fix (fun [] loop acc k ->
                                                                                                                                                                                  let lam = fun [acc,loop] i k ->
                                                                                                                                                                                    let prim = PRIM_EqInt(i,0) in
                                                                                                                                                                                    match prim with
                                                                                                                                                                                    | true1 -> k acc
                                                                                                                                                                                    | false0 ->
                                                                                                                                                                                      let c = PRIM_ModInt(i,10) in
                                                                                                                                                                                      let x = PRIM_AddInt(48,c) in
                                                                                                                                                                                      let x = PRIM_CharChr(x) in
                                                                                                                                                                                      let con = Cons1[x,acc] in
                                                                                                                                                                                      let k [i] app =
                                                                                                                                                                                        let prim = PRIM_DivInt(i,10) in
                                                                                                                                                                                        app prim k in
                                                                                                                                                                                      loop con k in
                                                                                                                                                                                  k lam) in
                                                                                                                                                                                let prim = PRIM_EqInt(seci,0) in
                                                                                                                                                                                let k [rev_onto,implode,explode,put_chars,seci,disk] case =
                                                                                                                                                                                  let k [rev_onto,implode,explode,put_chars,seci,disk] s1 =
                                                                                                                                                                                    let k [rev_onto,implode,explode,put_chars,seci,disk] xs =
                                                                                                                                                                                      let lit = "   **SLOW**" in
                                                                                                                                                                                      let k [rev_onto,implode,explode,put_chars,seci,disk,xs] ys =
                                                                                                                                                                                        let k [rev_onto,implode,explode,put_chars,seci,disk,xs] app =
                                                                                                                                                                                          let con = Nil0 in
                                                                                                                                                                                          let k [rev_onto,implode,explode,put_chars,seci,disk,xs,app] app =
                                                                                                                                                                                            let k [rev_onto,implode,explode,put_chars,seci,disk,app] app =
                                                                                                                                                                                              let k [rev_onto,implode,explode,put_chars,seci,disk] app =
                                                                                                                                                                                                let k [rev_onto,implode,explode,put_chars,seci,disk] s2 =
                                                                                                                                                                                                  let lit = "read_sector " in
                                                                                                                                                                                                  let k [rev_onto,implode,explode,put_chars,seci,disk,s2] xs =
                                                                                                                                                                                                    let k [rev_onto,implode,explode,put_chars,seci,disk,xs] ys =
                                                                                                                                                                                                      let k [rev_onto,implode,explode,put_chars,seci,disk,xs] app =
                                                                                                                                                                                                        let con = Nil0 in
                                                                                                                                                                                                        let k [rev_onto,implode,explode,put_chars,seci,disk,xs,app] app =
                                                                                                                                                                                                          let k [rev_onto,implode,explode,put_chars,seci,disk,app] app =
                                                                                                                                                                                                            let k [rev_onto,implode,explode,put_chars,seci,disk] app =
                                                                                                                                                                                                              let k [rev_onto,implode,explode,put_chars,seci,disk] m =
                                                                                                                                                                                                                let k [rev_onto,implode,explode,put_chars,seci,disk] xs =
                                                                                                                                                                                                                  let lit = "\n" in
                                                                                                                                                                                                                  let k [rev_onto,implode,explode,put_chars,seci,disk,xs] ys =
                                                                                                                                                                                                                    let k [rev_onto,implode,explode,put_chars,seci,disk,xs] app =
                                                                                                                                                                                                                      let con = Nil0 in
                                                                                                                                                                                                                      let k [rev_onto,implode,explode,put_chars,seci,disk,xs,app] app =
                                                                                                                                                                                                                        let k [rev_onto,implode,explode,put_chars,seci,disk,app] app =
                                                                                                                                                                                                                          let k [rev_onto,implode,explode,put_chars,seci,disk] app =
                                                                                                                                                                                                                            let k [rev_onto,implode,explode,put_chars,seci,disk] s2 =
                                                                                                                                                                                                                              let lit = "trace: " in
                                                                                                                                                                                                                              let k [rev_onto,implode,explode,put_chars,seci,disk,s2] xs =
                                                                                                                                                                                                                                let k [rev_onto,implode,explode,put_chars,seci,disk,xs] ys =
                                                                                                                                                                                                                                  let k [rev_onto,implode,explode,put_chars,seci,disk,xs] app =
                                                                                                                                                                                                                                    let con = Nil0 in
                                                                                                                                                                                                                                    let k [implode,explode,put_chars,seci,disk,xs,app] app =
                                                                                                                                                                                                                                      let k [implode,explode,put_chars,seci,disk,app] app =
                                                                                                                                                                                                                                        let k [implode,explode,put_chars,seci,disk] app =
                                                                                                                                                                                                                                          let k [explode,put_chars,seci,disk] s =
                                                                                                                                                                                                                                            let k [put_chars,seci,disk] app =
                                                                                                                                                                                                                                              let k [seci,disk] _ =
                                                                                                                                                                                                                                                let k [seci] source =
                                                                                                                                                                                                                                                  let offset = PRIM_MulInt(seci,512) in
                                                                                                                                                                                                                                                  let target = PRIM_MakeBytes(512) in
                                                                                                                                                                                                                                                  let loop = fix (fun [source,offset,target] loop i k ->
                                                                                                                                                                                                                                                    let b = PRIM_LessInt(i,512) in
                                                                                                                                                                                                                                                    let k [source,offset,target,i,loop] case =
                                                                                                                                                                                                                                                      match case with
                                                                                                                                                                                                                                                      | true1 ->
                                                                                                                                                                                                                                                        let con = Unit0 in
                                                                                                                                                                                                                                                        k con
                                                                                                                                                                                                                                                      | false0 ->
                                                                                                                                                                                                                                                        let y = PRIM_AddInt(offset,i) in
                                                                                                                                                                                                                                                        let char = PRIM_GetBytes(source,y) in
                                                                                                                                                                                                                                                        let _ = PRIM_SetBytes(target,i,char) in
                                                                                                                                                                                                                                                        let prim = PRIM_AddInt(i,1) in
                                                                                                                                                                                                                                                        loop prim k in
                                                                                                                                                                                                                                                    match b with
                                                                                                                                                                                                                                                    | true1 ->
                                                                                                                                                                                                                                                      let con = false0 in
                                                                                                                                                                                                                                                      k con
                                                                                                                                                                                                                                                    | false0 ->
                                                                                                                                                                                                                                                      let con = true1 in
                                                                                                                                                                                                                                                      k con) in
                                                                                                                                                                                                                                                  let k [target] _ =
                                                                                                                                                                                                                                                    let con = Sector0[target] in
                                                                                                                                                                                                                                                    k con in
                                                                                                                                                                                                                                                  loop 0 k in
                                                                                                                                                                                                                                                match disk with
                                                                                                                                                                                                                                                | Disk0(x) -> k x in
                                                                                                                                                                                                                                              put_chars app k in
                                                                                                                                                                                                                                            explode s k in
                                                                                                                                                                                                                                          implode app k in
                                                                                                                                                                                                                                        app app k in
                                                                                                                                                                                                                                      app xs k in
                                                                                                                                                                                                                                    rev_onto con k in
                                                                                                                                                                                                                                  rev_onto ys k in
                                                                                                                                                                                                                                explode s2 k in
                                                                                                                                                                                                                              explode lit k in
                                                                                                                                                                                                                            implode app k in
                                                                                                                                                                                                                          app app k in
                                                                                                                                                                                                                        app xs k in
                                                                                                                                                                                                                      rev_onto con k in
                                                                                                                                                                                                                    rev_onto ys k in
                                                                                                                                                                                                                  explode lit k in
                                                                                                                                                                                                                explode m k in
                                                                                                                                                                                                              implode app k in
                                                                                                                                                                                                            app app k in
                                                                                                                                                                                                          app xs k in
                                                                                                                                                                                                        rev_onto con k in
                                                                                                                                                                                                      rev_onto ys k in
                                                                                                                                                                                                    explode s2 k in
                                                                                                                                                                                                  explode lit k in
                                                                                                                                                                                                implode app k in
                                                                                                                                                                                              app app k in
                                                                                                                                                                                            app xs k in
                                                                                                                                                                                          rev_onto con k in
                                                                                                                                                                                        rev_onto ys k in
                                                                                                                                                                                      explode lit k in
                                                                                                                                                                                    explode s1 k in
                                                                                                                                                                                  implode case k in
                                                                                                                                                                                match prim with
                                                                                                                                                                                | true1 ->
                                                                                                                                                                                  let con = Nil0 in
                                                                                                                                                                                  let con = Cons1['0',con] in
                                                                                                                                                                                  k con
                                                                                                                                                                                | false0 ->
                                                                                                                                                                                  let con = Nil0 in
                                                                                                                                                                                  let k [seci] app = app seci k in
                                                                                                                                                                                  loop con k in
                                                                                                                                                                            match prim with
                                                                                                                                                                            | true1 ->
                                                                                                                                                                              let con = true1 in
                                                                                                                                                                              k con
                                                                                                                                                                            | false0 ->
                                                                                                                                                                              let b = PRIM_LessInt(seci,32) in
                                                                                                                                                                              match b with
                                                                                                                                                                              | true1 ->
                                                                                                                                                                                let con = false0 in
                                                                                                                                                                                k con
                                                                                                                                                                              | false0 ->
                                                                                                                                                                                let con = true1 in
                                                                                                                                                                                k con in
                                                                                                                                                                          match prim with
                                                                                                                                                                          | true1 ->
                                                                                                                                                                            let prim = PRIM_LessInt(secj,0) in
                                                                                                                                                                            let k [rev_onto,implode,explode,put_chars,disk,secj,sector] case =
                                                                                                                                                                              match case with
                                                                                                                                                                              | true1 ->
                                                                                                                                                                                let loop = fix (fun [] loop acc k ->
                                                                                                                                                                                  let lam = fun [acc,loop] i k ->
                                                                                                                                                                                    let prim = PRIM_EqInt(i,0) in
                                                                                                                                                                                    match prim with
                                                                                                                                                                                    | true1 -> k acc
                                                                                                                                                                                    | false0 ->
                                                                                                                                                                                      let c = PRIM_ModInt(i,10) in
                                                                                                                                                                                      let x = PRIM_AddInt(48,c) in
                                                                                                                                                                                      let x = PRIM_CharChr(x) in
                                                                                                                                                                                      let con = Cons1[x,acc] in
                                                                                                                                                                                      let k [i] app =
                                                                                                                                                                                        let prim = PRIM_DivInt(i,10) in
                                                                                                                                                                                        app prim k in
                                                                                                                                                                                      loop con k in
                                                                                                                                                                                  k lam) in
                                                                                                                                                                                let prim = PRIM_EqInt(secj,0) in
                                                                                                                                                                                let k [rev_onto,implode,explode,put_chars] case =
                                                                                                                                                                                  let k [rev_onto,implode,explode,put_chars] s2 =
                                                                                                                                                                                    let lit = "write_sector " in
                                                                                                                                                                                    let k [rev_onto,implode,explode,put_chars,s2] xs =
                                                                                                                                                                                      let k [rev_onto,implode,explode,put_chars,xs] ys =
                                                                                                                                                                                        let k [rev_onto,implode,explode,put_chars,xs] app =
                                                                                                                                                                                          let con = Nil0 in
                                                                                                                                                                                          let k [rev_onto,implode,explode,put_chars,xs,app] app =
                                                                                                                                                                                            let k [rev_onto,implode,explode,put_chars,app] app =
                                                                                                                                                                                              let k [rev_onto,implode,explode,put_chars] app =
                                                                                                                                                                                                let k [rev_onto,implode,explode,put_chars] m =
                                                                                                                                                                                                  let k [rev_onto,implode,explode,put_chars] xs =
                                                                                                                                                                                                    let lit = "\n" in
                                                                                                                                                                                                    let k [rev_onto,implode,explode,put_chars,xs] ys =
                                                                                                                                                                                                      let k [rev_onto,implode,explode,put_chars,xs] app =
                                                                                                                                                                                                        let con = Nil0 in
                                                                                                                                                                                                        let k [rev_onto,implode,explode,put_chars,xs,app] app =
                                                                                                                                                                                                          let k [rev_onto,implode,explode,put_chars,app] app =
                                                                                                                                                                                                            let k [rev_onto,implode,explode,put_chars] app =
                                                                                                                                                                                                              let k [rev_onto,implode,explode,put_chars] s2 =
                                                                                                                                                                                                                let lit = "error: " in
                                                                                                                                                                                                                let k [rev_onto,implode,explode,put_chars,s2] xs =
                                                                                                                                                                                                                  let k [rev_onto,implode,explode,put_chars,xs] ys =
                                                                                                                                                                                                                    let k [rev_onto,implode,explode,put_chars,xs] app =
                                                                                                                                                                                                                      let con = Nil0 in
                                                                                                                                                                                                                      let k [implode,explode,put_chars,xs,app] app =
                                                                                                                                                                                                                        let k [implode,explode,put_chars,app] app =
                                                                                                                                                                                                                          let k [implode,explode,put_chars] app =
                                                                                                                                                                                                                            let k [explode,put_chars] s =
                                                                                                                                                                                                                              let k [put_chars] app =
                                                                                                                                                                                                                                let k [] _ =
                                                                                                                                                                                                                                  let con = Unit0 in
                                                                                                                                                                                                                                  let prim = PRIM_Crash(con) in
                                                                                                                                                                                                                                  k prim in
                                                                                                                                                                                                                                put_chars app k in
                                                                                                                                                                                                                              explode s k in
                                                                                                                                                                                                                            implode app k in
                                                                                                                                                                                                                          app app k in
                                                                                                                                                                                                                        app xs k in
                                                                                                                                                                                                                      rev_onto con k in
                                                                                                                                                                                                                    rev_onto ys k in
                                                                                                                                                                                                                  explode s2 k in
                                                                                                                                                                                                                explode lit k in
                                                                                                                                                                                                              implode app k in
                                                                                                                                                                                                            app app k in
                                                                                                                                                                                                          app xs k in
                                                                                                                                                                                                        rev_onto con k in
                                                                                                                                                                                                      rev_onto ys k in
                                                                                                                                                                                                    explode lit k in
                                                                                                                                                                                                  explode m k in
                                                                                                                                                                                                implode app k in
                                                                                                                                                                                              app app k in
                                                                                                                                                                                            app xs k in
                                                                                                                                                                                          rev_onto con k in
                                                                                                                                                                                        rev_onto ys k in
                                                                                                                                                                                      explode s2 k in
                                                                                                                                                                                    explode lit k in
                                                                                                                                                                                  implode case k in
                                                                                                                                                                                match prim with
                                                                                                                                                                                | true1 ->
                                                                                                                                                                                  let con = Nil0 in
                                                                                                                                                                                  let con = Cons1['0',con] in
                                                                                                                                                                                  k con
                                                                                                                                                                                | false0 ->
                                                                                                                                                                                  let con = Nil0 in
                                                                                                                                                                                  let k [secj] app = app secj k in
                                                                                                                                                                                  loop con k
                                                                                                                                                                              | false0 ->
                                                                                                                                                                                let loop = fix (fun [] loop acc k ->
                                                                                                                                                                                  let lam = fun [acc,loop] i k ->
                                                                                                                                                                                    let prim = PRIM_EqInt(i,0) in
                                                                                                                                                                                    match prim with
                                                                                                                                                                                    | true1 -> k acc
                                                                                                                                                                                    | false0 ->
                                                                                                                                                                                      let c = PRIM_ModInt(i,10) in
                                                                                                                                                                                      let x = PRIM_AddInt(48,c) in
                                                                                                                                                                                      let x = PRIM_CharChr(x) in
                                                                                                                                                                                      let con = Cons1[x,acc] in
                                                                                                                                                                                      let k [i] app =
                                                                                                                                                                                        let prim = PRIM_DivInt(i,10) in
                                                                                                                                                                                        app prim k in
                                                                                                                                                                                      loop con k in
                                                                                                                                                                                  k lam) in
                                                                                                                                                                                let prim = PRIM_EqInt(secj,0) in
                                                                                                                                                                                let k [rev_onto,implode,explode,put_chars,disk,secj,sector] case =
                                                                                                                                                                                  let k [rev_onto,implode,explode,put_chars,disk,secj,sector] s1 =
                                                                                                                                                                                    let k [rev_onto,implode,explode,put_chars,disk,secj,sector] xs =
                                                                                                                                                                                      let lit = "   **SLOW**" in
                                                                                                                                                                                      let k [rev_onto,implode,explode,put_chars,disk,secj,sector,xs] ys =
                                                                                                                                                                                        let k [rev_onto,implode,explode,put_chars,disk,secj,sector,xs] app =
                                                                                                                                                                                          let con = Nil0 in
                                                                                                                                                                                          let k [rev_onto,implode,explode,put_chars,disk,secj,sector,xs,app] app =
                                                                                                                                                                                            let k [rev_onto,implode,explode,put_chars,disk,secj,sector,app] app =
                                                                                                                                                                                              let k [rev_onto,implode,explode,put_chars,disk,secj,sector] app =
                                                                                                                                                                                                let k [rev_onto,implode,explode,put_chars,disk,secj,sector] s2 =
                                                                                                                                                                                                  let lit = "write_sector " in
                                                                                                                                                                                                  let k [rev_onto,implode,explode,put_chars,disk,secj,sector,s2] xs =
                                                                                                                                                                                                    let k [rev_onto,implode,explode,put_chars,disk,secj,sector,xs] ys =
                                                                                                                                                                                                      let k [rev_onto,implode,explode,put_chars,disk,secj,sector,xs] app =
                                                                                                                                                                                                        let con = Nil0 in
                                                                                                                                                                                                        let k [rev_onto,implode,explode,put_chars,disk,secj,sector,xs,app] app =
                                                                                                                                                                                                          let k [rev_onto,implode,explode,put_chars,disk,secj,sector,app] app =
                                                                                                                                                                                                            let k [rev_onto,implode,explode,put_chars,disk,secj,sector] app =
                                                                                                                                                                                                              let k [rev_onto,implode,explode,put_chars,disk,secj,sector] m =
                                                                                                                                                                                                                let k [rev_onto,implode,explode,put_chars,disk,secj,sector] xs =
                                                                                                                                                                                                                  let lit = "\n" in
                                                                                                                                                                                                                  let k [rev_onto,implode,explode,put_chars,disk,secj,sector,xs] ys =
                                                                                                                                                                                                                    let k [rev_onto,implode,explode,put_chars,disk,secj,sector,xs] app =
                                                                                                                                                                                                                      let con = Nil0 in
                                                                                                                                                                                                                      let k [rev_onto,implode,explode,put_chars,disk,secj,sector,xs,app] app =
                                                                                                                                                                                                                        let k [rev_onto,implode,explode,put_chars,disk,secj,sector,app] app =
                                                                                                                                                                                                                          let k [rev_onto,implode,explode,put_chars,disk,secj,sector] app =
                                                                                                                                                                                                                            let k [rev_onto,implode,explode,put_chars,disk,secj,sector] s2 =
                                                                                                                                                                                                                              let lit = "trace: " in
                                                                                                                                                                                                                              let k [rev_onto,implode,explode,put_chars,disk,secj,sector,s2] xs =
                                                                                                                                                                                                                                let k [rev_onto,implode,explode,put_chars,disk,secj,sector,xs] ys =
                                                                                                                                                                                                                                  let k [rev_onto,implode,explode,put_chars,disk,secj,sector,xs] app =
                                                                                                                                                                                                                                    let con = Nil0 in
                                                                                                                                                                                                                                    let k [implode,explode,put_chars,disk,secj,sector,xs,app] app =
                                                                                                                                                                                                                                      let k [implode,explode,put_chars,disk,secj,sector,app] app =
                                                                                                                                                                                                                                        let k [implode,explode,put_chars,disk,secj,sector] app =
                                                                                                                                                                                                                                          let k [explode,put_chars,disk,secj,sector] s =
                                                                                                                                                                                                                                            let k [put_chars,disk,secj,sector] app =
                                                                                                                                                                                                                                              let k [disk,secj,sector] _ =
                                                                                                                                                                                                                                                let k [secj,sector] target =
                                                                                                                                                                                                                                                  let offset = PRIM_MulInt(secj,512) in
                                                                                                                                                                                                                                                  let k [target,offset] source =
                                                                                                                                                                                                                                                    let loop = fix (fun [target,offset,source] loop i k ->
                                                                                                                                                                                                                                                      let b = PRIM_LessInt(i,512) in
                                                                                                                                                                                                                                                      let k [target,offset,source,i,loop] case =
                                                                                                                                                                                                                                                        match case with
                                                                                                                                                                                                                                                        | true1 ->
                                                                                                                                                                                                                                                          let con = Unit0 in
                                                                                                                                                                                                                                                          k con
                                                                                                                                                                                                                                                        | false0 ->
                                                                                                                                                                                                                                                          let char = PRIM_GetBytes(source,i) in
                                                                                                                                                                                                                                                          let y = PRIM_AddInt(offset,i) in
                                                                                                                                                                                                                                                          let _ = PRIM_SetBytes(target,y,char) in
                                                                                                                                                                                                                                                          let prim = PRIM_AddInt(i,1) in
                                                                                                                                                                                                                                                          loop prim k in
                                                                                                                                                                                                                                                      match b with
                                                                                                                                                                                                                                                      | true1 ->
                                                                                                                                                                                                                                                        let con = false0 in
                                                                                                                                                                                                                                                        k con
                                                                                                                                                                                                                                                      | false0 ->
                                                                                                                                                                                                                                                        let con = true1 in
                                                                                                                                                                                                                                                        k con) in
                                                                                                                                                                                                                                                    loop 0 k in
                                                                                                                                                                                                                                                  match sector with
                                                                                                                                                                                                                                                  | Sector0(x) -> k x in
                                                                                                                                                                                                                                                match disk with
                                                                                                                                                                                                                                                | Disk0(x) -> k x in
                                                                                                                                                                                                                                              put_chars app k in
                                                                                                                                                                                                                                            explode s k in
                                                                                                                                                                                                                                          implode app k in
                                                                                                                                                                                                                                        app app k in
                                                                                                                                                                                                                                      app xs k in
                                                                                                                                                                                                                                    rev_onto con k in
                                                                                                                                                                                                                                  rev_onto ys k in
                                                                                                                                                                                                                                explode s2 k in
                                                                                                                                                                                                                              explode lit k in
                                                                                                                                                                                                                            implode app k in
                                                                                                                                                                                                                          app app k in
                                                                                                                                                                                                                        app xs k in
                                                                                                                                                                                                                      rev_onto con k in
                                                                                                                                                                                                                    rev_onto ys k in
                                                                                                                                                                                                                  explode lit k in
                                                                                                                                                                                                                explode m k in
                                                                                                                                                                                                              implode app k in
                                                                                                                                                                                                            app app k in
                                                                                                                                                                                                          app xs k in
                                                                                                                                                                                                        rev_onto con k in
                                                                                                                                                                                                      rev_onto ys k in
                                                                                                                                                                                                    explode s2 k in
                                                                                                                                                                                                  explode lit k in
                                                                                                                                                                                                implode app k in
                                                                                                                                                                                              app app k in
                                                                                                                                                                                            app xs k in
                                                                                                                                                                                          rev_onto con k in
                                                                                                                                                                                        rev_onto ys k in
                                                                                                                                                                                      explode lit k in
                                                                                                                                                                                    explode s1 k in
                                                                                                                                                                                  implode case k in
                                                                                                                                                                                match prim with
                                                                                                                                                                                | true1 ->
                                                                                                                                                                                  let con = Nil0 in
                                                                                                                                                                                  let con = Cons1['0',con] in
                                                                                                                                                                                  k con
                                                                                                                                                                                | false0 ->
                                                                                                                                                                                  let con = Nil0 in
                                                                                                                                                                                  let k [secj] app = app secj k in
                                                                                                                                                                                  loop con k in
                                                                                                                                                                            match prim with
                                                                                                                                                                            | true1 ->
                                                                                                                                                                              let con = true1 in
                                                                                                                                                                              k con
                                                                                                                                                                            | false0 ->
                                                                                                                                                                              let b = PRIM_LessInt(secj,32) in
                                                                                                                                                                              match b with
                                                                                                                                                                              | true1 ->
                                                                                                                                                                                let con = false0 in
                                                                                                                                                                                k con
                                                                                                                                                                              | false0 ->
                                                                                                                                                                                let con = true1 in
                                                                                                                                                                                k con
                                                                                                                                                                          | false0 ->
                                                                                                                                                                            let con = Unit0 in
                                                                                                                                                                            k con in
                                                                                                                                                                  implode app k in
                                                                                                                                                                app app k in
                                                                                                                                                              app xs k in
                                                                                                                                                            rev_onto con k in
                                                                                                                                                          rev_onto ys k in
                                                                                                                                                        explode s2 k in
                                                                                                                                                      explode lit k in
                                                                                                                                                    implode case k in
                                                                                                                                                  match prim with
                                                                                                                                                  | true1 ->
                                                                                                                                                    let con = Nil0 in
                                                                                                                                                    let con = Cons1['0',con] in
                                                                                                                                                    k con
                                                                                                                                                  | false0 ->
                                                                                                                                                    let con = Nil0 in
                                                                                                                                                    let k [seci] app = app seci k in
                                                                                                                                                    loop con k in
                                                                                                                                                implode app k in
                                                                                                                                              app app k in
                                                                                                                                            app xs k in
                                                                                                                                          rev_onto con k in
                                                                                                                                        rev_onto ys k in
                                                                                                                                      explode s2 k in
                                                                                                                                    explode lit k in
                                                                                                                                  implode app k in
                                                                                                                                app app k in
                                                                                                                              app xs k in
                                                                                                                            rev_onto con k in
                                                                                                                          rev_onto ys k in
                                                                                                                        explode s2 k in
                                                                                                                      explode s1 k in
                                                                                                                    implode app k in
                                                                                                                  app app k in
                                                                                                                app xs k in
                                                                                                              rev_onto con k in
                                                                                                            rev_onto ys k in
                                                                                                          explode s2 k in
                                                                                                        explode lit k in
                                                                                                      implode app k in
                                                                                                    app app k in
                                                                                                  app xs k in
                                                                                                rev_onto con k in
                                                                                              rev_onto ys k in
                                                                                            explode lit k in
                                                                                          explode s1 k in
                                                                                        implode case k in
                                                                                      match prim with
                                                                                      | true1 ->
                                                                                        let con = Nil0 in
                                                                                        let con = Cons1['0',con] in
                                                                                        k con
                                                                                      | false0 ->
                                                                                        let con = Nil0 in
                                                                                        let k [seci] app = app seci k in
                                                                                        loop con k in
                                                                                    implode case k in
                                                                                  match prim with
                                                                                  | true1 ->
                                                                                    let con = Nil0 in
                                                                                    let con = Cons1['0',con] in
                                                                                    k con
                                                                                  | false0 ->
                                                                                    let con = Nil0 in
                                                                                    let k [i] app = app i k in
                                                                                    loop con k in
                                                                              match prim with
                                                                              | true1 ->
                                                                                let con = true1 in
                                                                                k con
                                                                              | false0 ->
                                                                                let b = PRIM_LessInt(i,256) in
                                                                                match b with
                                                                                | true1 ->
                                                                                  let con = false0 in
                                                                                  k con
                                                                                | false0 ->
                                                                                  let con = true1 in
                                                                                  k con) in
                                                                          let k [] _ =
                                                                            let con = Unit0 in
                                                                            k con in
                                                                          loop 100 k in
                                                                        loop 114 k in
                                                                      loop 101 k in
                                                                    loop 0 k in
                                                                  match disk with
                                                                  | Disk0(x) -> k x in
                                                                put_chars app k in
                                                              explode s k in
                                                            implode app k in
                                                          app app k in
                                                        app xs k in
                                                      rev_onto con k in
                                                    rev_onto ys k in
                                                  explode s2 k in
                                                explode lit k in
                                              implode app k in
                                            app app k in
                                          app xs k in
                                        rev_onto con k in
                                      rev_onto ys k in
                                    explode lit k in
                                  explode m k in
                                implode app k in
                              app app k in
                            app xs k in
                          rev_onto con k in
                        rev_onto ys k in
                      explode s2 k in
                    explode lit k in
                  implode app k in
                app app k in
              app xs k in
            rev_onto con k in
          rev_onto ys k in
        explode lit k in
      explode s1 k in
    implode con k in
  block lam k in
block lam k
