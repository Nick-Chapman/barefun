(library
 (name example_lib)
 (flags (:standard -nostdlib -nopervasives)) ; ensure we are explicit about all primitives
 (libraries prim_lib))

(rule
  (with-stdout-to halts.ml
    (progn
      (echo "module F() : sig val main : unit -> unit end = struct\n")
      (echo "open Prim_lib.Prim\n")
      (echo "#1 \"halts.fun\"\n")
      (cat ../../examples/halts.fun)
      (echo "end\n")
      )))

(rule
  (with-stdout-to tiny.ml
    (progn
      (echo "module F() : sig val main : unit -> unit end = struct\n")
      (echo "open Prim_lib.Prim\n")
      (echo "#1 \"tiny.fun\"\n")
      (cat ../../examples/tiny.fun)
      (echo "end\n")
      )))

(rule
  (with-stdout-to small.ml
    (progn
      (echo "module F() : sig val main : unit -> unit end = struct\n")
      (echo "open Prim_lib.Prim\n")
      (echo "#1 \"small.fun\"\n")
      (cat ../../examples/small.fun)
      (echo "end\n")
      )))

(rule
  (with-stdout-to shell.ml
    (progn
      (echo "module F() : sig val main : unit -> unit end = struct\n")
      (echo "open Prim_lib.Prim\n")
      (echo "#1 \"shell.fun\"\n")
      (cat ../../examples/shell.fun)
      (echo "end\n")
      )))
